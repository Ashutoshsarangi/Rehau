{"version":3,"sources":["ng://rehau-functional-core/lib/stores/onboarding-steps/action/onboarding-step.actions.ts","ng://rehau-functional-core/lib/rehau-functional-core.service.ts","ng://rehau-functional-core/lib/services/config-service/config-service.module.ts","node_modules/tslib/tslib.es6.js","ng://rehau-functional-core/lib/services/logger-service/logger.service.ts","ng://rehau-functional-core/lib/services/config-service/config-service.ts","ng://rehau-functional-core/lib/services/translate-service/translate-service.module.ts","ng://rehau-functional-core/lib/services/translate-service/translate-service.ts","ng://rehau-functional-core/lib/rehau-functional-core.module.ts","ng://rehau-functional-core/lib/stores/onboarding-steps/reducer/onboarding-step.reducer.ts","ng://rehau-functional-core/lib/stores/auth/action/auth.action.ts","ng://rehau-functional-core/lib/stores/auth/reducer/auth.reducer.ts","ng://rehau-functional-core/lib/stores/loader/action/loader.action.ts","ng://rehau-functional-core/lib/stores/loader/reducer/loader.reducer.ts","ng://rehau-functional-core/lib/stores/reducer-composition.ts","ng://rehau-functional-core/lib/services/cache-service/cache.service.ts","ng://rehau-functional-core/lib/providers/cidaas.provider.ts","ng://rehau-functional-core/lib/services/web-service/web.service.ts","ng://rehau-functional-core/lib/config/local-storage.config.ts","ng://rehau-functional-core/lib/services/store-service/store.service.ts","ng://rehau-functional-core/lib/services/auth-service/auth.service.ts","ng://rehau-functional-core/lib/config/cidaas.config.ts","ng://rehau-functional-core/lib/services/login-service/login.service.ts","ng://rehau-functional-core/lib/services/auth-service/auth-guard.service.ts","ng://rehau-functional-core/lib/services/route-animation/route-animation.ts","ng://rehau-functional-core/lib/services/on-boarding-serice/on-boarding.service.ts","ng://rehau-functional-core/lib/models/getway.model.ts","ng://rehau-functional-core/lib/services/gateway-service/gatewayAcl.service.ts","ng://rehau-functional-core/lib/services/gateway-service/gateway.service.ts","ng://rehau-functional-core/lib/services/gateway-service/gatewayDeviceControl.service.ts","ng://rehau-functional-core/lib/services/onlineOffline-service/onlineOffline.service.ts","ng://rehau-functional-core/lib/services/leakage-helper-service/settings.service.ts","ng://rehau-functional-core/lib/models/zAutomation.model.ts","ng://rehau-functional-core/lib/services/zAutomation-service/zAutomation.service.ts"],"names":["onBoardingNextStep","createAction","props","onBoardingBackStep","RehauFunctionalCoreService","prototype","showSuccess","this","onBoardingData$","subscribe","data","console","log","store","dispatch","payload","configPosition","Injectable","args","providedIn","Store","pipe","select","CONFIG_FACTORY","configService","initConfig","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","adopt","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","LogService","content","_i","log_e","log_w","log_d","ConfigService","conFig","configuration","logService","Inject","HttpLoaderFactory","http","TranslateHttpLoader","TRANSLATE_FACTORY","initTranslation","TranslateServiceModule","NgModule","imports","HttpClientModule","TranslateModule","forRoot","loader","provide","TranslateLoader","useFactory","deps","HttpClient","exports","TranslationService","globalConfig","languages","addLangs","splitLanguages","defaultLanguage","setDefaultLang","currentLanguage","use","langs","availableLanguages","split","filter","x","currentLang","translateService","currentLoader","onLangChange","onTranslationChange","onDefaultLangChange","lang","getDefaultLang","getTranslation","getLangs","reloadLang","resetLang","getBrowserLang","getBrowserCultureLang","get","key","interpolateParams","instant","_this","Observable","subscriber","instantObject","item","isArray","temp_1","item_1","tslib_1.__values","item_1_1","element","mainInstant","temp","keyVal","val","TranslateService","RehauFunctionalCoreModule","SERVICE_CONFIG","ngModule","providers","useValue","APP_INITIALIZER","forwardRef","multi","declarations","initialState","Reducer","createReducer","on","state","_a","onBoardingReducer","action","userInfoAction","userInfo","cidaasReducer","loaderAction","showLoader","loaderReducer","reducers","onBoardingData","cidaasData","loaderState","CacheService","removeLocalData","localStorage","removeItem","getLocalData","getItem","simpleCrypto","decrypt","setLocalData","encrypted","encrypt","setItem","SimpleCrypto","SECRET_KEY","_super","CidaasProvider","tslib_1.__extends","OAuthProvider","base64URLEncode","str","toString","replace","sha256","buffer","shajs","update","digest","removeParam","sourceURL","rtn","paramsArr","queryString","indexOf","splice","join","addParam","options","appScope","optionsToDialogUrl","url","authType","nonce","code_challenge_method","code_challenge","viewType","CLIENT_ID","tokenEndpoint","baseURL","revokeUrl","authUrl","defaults","responseType","Error","name","WebService","getApi","httpOptions","retryConfig","keys","timeout","REQ_TIMEOUT","retryBackoff","initialInterval","INIT_INTERVAL","maxInterval","MAX_INTERVAL","maxRetries","MAX_RETRIES","shouldRetry","backoffDelay","iteration","Math","pow","postApi","requestBody","post","requestApi","method","request","BASE_URL","userData","LoaderFlag","Subject","StoreService","dispatchUserData","Data","getUserData","userData$","dispatchLoaderState","getLoaderState","showLoader$","AuthService","oAuthCallback","message","getToken","tokenRequest","webService","cidaasConfig","ciddasTokenEndpoint","toPromise","response","access_token","refresh_token","storeService","cacheService","ErrorEvent","e_1","status","logservice","isLoggedIn","currentUserFromStore","currentUser","checkTokenStatus","isTokenExpire","refreshTokenWrapper","JwtHelperService","isTokenExpired","user","client_id","cidaasClientId","grant_type","getCorrelationId","getUser","decodeToken","sub","bodyParam","loginDesign","closebuttoncolor","hardwareback","hidenavigationbuttons","hideurlbar","navigationbuttoncolor","toolbarcolor","registerDesign","userObject","accessToken","refreshToken","LoginService","cidaasAuth","actionType","platform","trim","provider","cidaasParam","cidaasRegisterProvider","cidaasLoginProvider","pkceBody","clientId","redirect_uri","redirectUri","code_verifier","res","login","undefined","throwError","err_1","cidaasLogout","err","oauth","OauthBrowser","OauthCordova","cidaasLoginDesign","cidaasRegisterDesign","logInVia","code","authService","AuthGuard","canActivate","loginScreenUrl","router","navigate","Router","slideInAnimation","trigger","transition","query","style","position","width","height","optional","group","transform","animate","OnBoardingService","nextClickActionHandler","currentPageTitle","nextPageTitle","prevPageTitle","delay","prevClickActionHandler","CommonConstants","gatewayDeviceControlEndpoint","gatewayAclEndpoint","GatewayAclService","cloudGetHomes","userControllerGET","gatewayAclUser","_d","_b","homes","_c","homeId","JSON","stringify","e_2","HttpHeaders","bind","Content-Type","headers","_e","gwUser","getGatewaysToHome","aclUser","gateways","gatewayId","gwResult","credentials","userCredentials","_f","credId","homeGwId","type","GatewayAclServiceUserGatewayCredsType","newCreds","password","GatewayCredentialsTypes","getHomeOfUser","homeID","home","httpClient","storageName","GatewayAlreadyConfiguredError","GatewaySerialNotFoundError","GatewayService","callApi","gateway","apiEndpoint","connectionType","retryLocal","retryRemote","killRequestObject","localResponseType","continue","REQ_TIMEOUT_LOCAL","INIT_INTERVAL_LOCAL","MAX_INTERVAL_LOCAL","completedFirstRun","localOnline","remoteOnline","useCredentials","creds","username","boxId","urlEndpoint","toUpperCase","requestHeader","httpOption","apiResponse","e_3","basicAuthString","btoa","Authorization","localIp","e_4","Date","getTime","cancelRequestLocal","cancelRequestRemote","remotePromise","localPromise","race","e_5","e_6","e_7","getLeckageDeviceConnectedToGateway","getMock","doDefaultRetrys","allDevices","nodeId","foundDevices","devices","device","manufacturerId","manufacturerProductId","manufacturerProductType","givenName","onLogout","saveGateway","getPairedGateway","rawGatewayObject","parse","INIT_INTERVAL_REMOTE","MAX_INTERVAL_REMOTE","REQ_TIMEOUT_REMOTE","gatewayAclService","observerId","GatewayDeviceControlService","updateGatewayData","mac","id","onlineOfflineData","OnlineOfflineService","initialize","clearInterval","tickInterval","setInterval","tick","refreshTime","localBefore","remoteBefore","checkConnection","notify","gatewayService","failureRate","BehaviorSubject","REGUARD_OFFLINE","Settings","amountUnit","AmountUnit","flowUnit","FlowUnit","pressureUnit","PressureUnit","temperatureUnit","TemperatureUnit","SensorSettingService","convertAmount","unit","inValue","roundValue","roundValueToZeroDigits","convertFlow","convertTemp","convertPressure","getSettings","gw","setSettings","settings","toFixed","SafeGuardDevice","getAllConfigParams","sensorDevices","sensorUpdateSub","sensorsDataSub","ZAutomationService","defineProperty","_deviceMap","setConfigWrapperToStorage","onlineOfflineUpdate","onlineOfflineService","firstRun","leckageDeviceId","getConfigWrapperFromStorage","pollData","decFailureRate","stack","incFailureRate","deviceMap","updateTime","fetchPollData","newWrapper","pollObject","parseDevices","deviceID","getDeviceAndInstance","instance","deviceIDandInstance","pollObject_1","pollObject_1_1","obj","flag","filterDeviceMap","regex","test","getValue","updateSensorValue","sensorNo","deviceIDandInstanceString","sensorPath","getSensorValue","sensorsValue","sensors","RegExp","metrics","isFailed","setTimeout","settingService","waterMeter","level","timestamp","waterTemperature","waterFlow","waterPressure","dummyDevice","now","floor","nowOneMin","appStartTime","freezeButtonUntil","guardChecked","safeGuardChecked"],"mappings":"uwCAEA,IAAaA,EAAqBC,EAAAA,aAAa,qCAAsCC,EAAAA,SACxEC,EAAqBF,EAAAA,aAAa,qCAAsCC,EAAAA,SCDrFE,GAgBEA,EAAAC,UAAAC,YAAA,WACEC,KAAKC,gBAAgBC,UAAS,SAAEC,GAC9BC,QAAQC,IAAI,wDAAsDF,KAEpEH,KAAKM,MAAMC,SAASd,EAAmB,CAAEe,QAAS,CAAEC,eAAgB,2BAfvEC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAJLC,EAAAA,kIASP,SAAAhB,EAAoBS,GAAAN,KAAAM,MAAAA,EAClBN,KAAKC,gBAAkBK,EAAMQ,KAAKC,EAAAA,OAAO,mBCX7C,SAAgBC,EAAeC,GAC7B,OAAA,WAAa,OAAAA,EAAcC,cCY7B,IAAIC,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAO7B,KAAK8B,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEtB,UAAkB,OAANuB,EAAaC,OAAOS,OAAOV,IAAMQ,EAAG/B,UAAYuB,EAAEvB,UAAW,IAAI+B,GAG5E,IAAIG,EAAW,WAQlB,OAPAA,EAAWV,OAAOW,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIV,KADTS,EAAIG,UAAUF,GACOd,OAAOxB,UAAU6B,eAAea,KAAKL,EAAGT,KAAIQ,EAAER,GAAKS,EAAET,IAE9E,OAAOQ,IAEKO,MAAMzC,KAAMsC,YAGhC,SA2BgBI,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAWD,EAANA,GAAUE,SAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,SAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAJzD,SAASO,EAAMP,GAAS,OAAOA,aAAiBN,EAAIM,EAAQ,IAAIN,EAAE,SAAUG,GAAWA,EAAQG,KAI7BO,CAAMF,EAAOL,OAAOQ,KAAKT,EAAWK,GAClGH,GAAMN,EAAYA,EAAUL,MAAME,EAASC,GAAc,KAAKS,UAItE,SAAgBO,EAAYjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAG7B,EAAG8B,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPjC,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOkC,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEX,KAAMiB,EAAK,GAAIC,QAASD,EAAK,GAAIE,SAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAO1E,OAAUgE,EACvJ,SAASM,EAAKjC,GAAK,OAAO,SAAUsC,GAAK,OACzC,SAASvB,EAAKwB,GACV,GAAId,EAAG,MAAM,IAAIe,UAAU,mCAC3B,KAAOZ,GAAG,IACN,GAAIH,EAAI,EAAGC,IAAM7B,EAAY,EAAR0C,EAAG,GAASb,EAAU,UAAIa,EAAG,GAAKb,EAAS,YAAO7B,EAAI6B,EAAU,YAAM7B,EAAEM,KAAKuB,GAAI,GAAKA,EAAEV,SAAWnB,EAAIA,EAAEM,KAAKuB,EAAGa,EAAG,KAAKnB,KAAM,OAAOvB,EAE3J,OADI6B,EAAI,EAAG7B,IAAG0C,EAAK,CAAS,EAARA,EAAG,GAAQ1C,EAAEiB,QACzByB,EAAG,IACP,KAAK,EAAG,KAAK,EAAG1C,EAAI0C,EAAI,MACxB,KAAK,EAAc,OAAXX,EAAEC,QAAgB,CAAEf,MAAOyB,EAAG,GAAInB,MAAM,GAChD,KAAK,EAAGQ,EAAEC,QAASH,EAAIa,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKX,EAAEI,IAAIS,MAAOb,EAAEG,KAAKU,MAAO,SACxC,QACI,KAAkB5C,EAAe,GAA3BA,EAAI+B,EAAEG,MAAY7B,QAAcL,EAAEA,EAAEK,OAAS,MAAkB,IAAVqC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEX,EAAI,EAAG,SACjG,GAAc,IAAVW,EAAG,MAAc1C,GAAM0C,EAAG,GAAK1C,EAAE,IAAM0C,EAAG,GAAK1C,EAAE,IAAM,CAAE+B,EAAEC,MAAQU,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYX,EAAEC,MAAQhC,EAAE,GAAI,CAAE+B,EAAEC,MAAQhC,EAAE,GAAIA,EAAI0C,EAAI,MAC7D,GAAI1C,GAAK+B,EAAEC,MAAQhC,EAAE,GAAI,CAAE+B,EAAEC,MAAQhC,EAAE,GAAI+B,EAAEI,IAAIU,KAAKH,GAAK,MACvD1C,EAAE,IAAI+B,EAAEI,IAAIS,MAChBb,EAAEG,KAAKU,MAAO,SAEtBF,EAAKf,EAAKrB,KAAKG,EAASsB,GAC1B,MAAOX,GAAKsB,EAAK,CAAC,EAAGtB,GAAIS,EAAI,UAAeD,EAAI5B,EAAI,EACtD,GAAY,EAAR0C,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEzB,MAAOyB,EAAG,GAAKA,EAAG,QAAK,EAAQnB,MAAM,GArB9BL,CAAK,CAACf,EAAGsC,MAyB7D,SAIgBK,EAASC,GACrB,IAAI9C,EAAsB,mBAAXsC,QAAyBA,OAAOC,SAAUQ,EAAI/C,GAAK8C,EAAE9C,GAAIC,EAAI,EAC5E,GAAI8C,EAAG,OAAOA,EAAE1C,KAAKyC,GACrB,GAAIA,GAAyB,iBAAbA,EAAE1C,OAAqB,MAAO,CAC1Cc,KAAM,WAEF,OADI4B,GAAK7C,GAAK6C,EAAE1C,SAAQ0C,OAAI,GACrB,CAAE9B,MAAO8B,GAAKA,EAAE7C,KAAMqB,MAAOwB,KAG5C,MAAM,IAAIJ,UAAU1C,EAAI,0BAA4B,mCAGxD,SAAgBgD,EAAOF,EAAG5C,GACtB,IAAI6C,EAAsB,mBAAXT,QAAyBQ,EAAER,OAAOC,UACjD,IAAKQ,EAAG,OAAOD,EACf,IAAmBG,EAAY9B,EAA3BlB,EAAI8C,EAAE1C,KAAKyC,GAAOI,EAAK,GAC3B,IACI,WAAc,IAANhD,GAAsB,EAANA,QAAc+C,EAAIhD,EAAEiB,QAAQI,MAAM4B,EAAGN,KAAKK,EAAEjC,OAExE,MAAOmC,GAAShC,EAAI,CAAEgC,MAAOA,WAEzB,IACQF,IAAMA,EAAE3B,OAASyB,EAAI9C,EAAU,YAAI8C,EAAE1C,KAAKJ,WAExC,GAAIkB,EAAG,MAAMA,EAAEgC,OAE7B,OAAOD,EAGX,SAAgBE,IACZ,IAAK,IAAIF,EAAK,GAAIjD,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CiD,EAAKA,EAAGG,OAAOL,EAAO7C,UAAUF,KACpC,OAAOiD,SClITI,EAAA3F,UAAAO,IAAA,eAAI,IAAAqF,EAAA,GAAAC,EAAA,EAAAA,EAAArD,UAAAC,OAAAoD,IAAAD,EAAAC,GAAArD,UAAAqD,GAKFvF,QAAQC,IAAGoC,MAAXrC,QAAOmF,EAAA,CAAK,MAASG,KAMvBD,EAAA3F,UAAA8F,MAAA,eAAM,IAAAF,EAAA,GAAAC,EAAA,EAAAA,EAAArD,UAAAC,OAAAoD,IAAAD,EAAAC,GAAArD,UAAAqD,GAKJvF,QAAQC,IAAGoC,MAAXrC,QAAOmF,EAAA,CAAK,SAAYG,KAO1BD,EAAA3F,UAAA+F,MAAA,eAAM,IAAAH,EAAA,GAAAC,EAAA,EAAAA,EAAArD,UAAAC,OAAAoD,IAAAD,EAAAC,GAAArD,UAAAqD,GAKJvF,QAAQC,IAAGoC,MAAXrC,QAAOmF,EAAA,CAAK,OAAUG,KAQxBD,EAAA3F,UAAAgG,MAAA,eAAM,IAAAJ,EAAA,GAAAC,EAAA,EAAAA,EAAArD,UAAAC,OAAAoD,IAAAD,EAAAC,GAAArD,UAAAqD,GAKJvF,QAAQC,IAAGoC,MAAXrC,QAAOmF,EAAA,CAAK,aAAgBG,yBAhD/BhF,EAAAA,aAmDD+E,GAnDA,SAAAA,KCcA,IAAAM,GAWSA,EAAAjG,UAAAoB,WAAP,WACElB,KAAKgG,OAAShG,KAAKiG,cACnBjG,KAAKkG,WAAW7F,IAAI,+BAAgCL,KAAKgG,6BAb5DtF,EAAAA,kFAOIyF,EAAAA,OAAMxF,KAAA,CAAC,2BAvBH8E,KAgCTM,GAVE,SAAAA,EACmCE,EACzBC,GADyBlG,KAAAiG,cAAAA,EACzBjG,KAAAkG,WAAAA,ECdZ,SAAgBE,EAAkBC,GAChC,OAAO,IAAIC,EAAAA,oBAAoBD,EAAM,iBAAkB,SAGzD,SAAgBE,EAAkBtF,GAChC,OAAA,WAAa,OAAAA,EAAcuF,mBAE7B,IAAAC,uBAACC,EAAAA,SAAQ/F,KAAA,CAAC,CACRgG,QAAS,CACPC,EAAAA,iBACAC,EAAAA,gBAAgBC,QAAQ,CACtBC,OAAQ,CACNC,QAASC,EAAAA,gBACTC,WAAYd,EACZe,KAAM,CAACC,EAAAA,gBAIbC,QAAS,CACPR,EAAAA,qBAIJJ,GAhBA,SAAAA,YCASa,EAAAxH,UAAA0G,gBAAP,WACExG,KAAKkG,WAAW7F,IAAI,uBAAwBL,KAAKiG,eAC7CjG,KAAKiG,eACPjG,KAAKkG,WAAW7F,IAAI,iBAAkBL,KAAKiG,eACrCjG,KAAKiG,cAAcsB,aAAaC,WACpCxH,KAAKyH,SAASzH,KAAK0H,eAAe1H,KAAKiG,cAAcsB,aAAaC,YAE9DxH,KAAKiG,cAAcsB,aAAaI,iBACpC3H,KAAK4H,eAAe5H,KAAKiG,cAAcsB,aAAaI,iBAEhD3H,KAAKiG,cAAcsB,aAAaM,kBACpC7H,KAAKkG,WAAW7F,IAAI,oCACpBL,KAAK8H,IAAI9H,KAAKiG,cAAcsB,aAAaM,mBAG3C7H,KAAKkG,WAAW7F,IAAI,yFAIhBiH,EAAAxH,UAAA4H,eAAR,SAAuBK,OACjBC,EAAoCD,EAAME,MAAM,KACpD,OAA6BD,EAAmBE,OAAM,SAACC,GAAK,OAAW,EAAXA,EAAE5F,UAGzD+E,EAAAxH,UAAAsI,YAAP,WACE,OAAOpI,KAAKqI,iBAAiBD,aAGxBd,EAAAxH,UAAAwI,cAAP,WACE,OAAOtI,KAAKqI,iBAAiBC,eAGxBhB,EAAAxH,UAAAyI,aAAP,WACE,OAAOvI,KAAKqI,iBAAiBE,cAGxBjB,EAAAxH,UAAA0I,oBAAP,WACE,OAAOxI,KAAKqI,iBAAiBG,qBAGxBlB,EAAAxH,UAAA2I,oBAAP,WACE,OAAOzI,KAAKqI,iBAAiBI,qBAQxBnB,EAAAxH,UAAA8H,eAAP,SAAsBc,GACpB1I,KAAKqI,iBAAiBT,eAAec,IAMhCpB,EAAAxH,UAAA6I,eAAP,WACE,OAAO3I,KAAKqI,iBAAiBM,kBAOxBrB,EAAAxH,UAAAgI,IAAP,SAAWY,GAET,OADA1I,KAAKkG,WAAW7F,IAAI,uCAAqCqI,GAClD1I,KAAKqI,iBAAiBP,IAAIY,IAO5BpB,EAAAxH,UAAA8I,eAAP,SAAsBF,GACpB,OAAO1I,KAAKqI,iBAAiBO,eAAeF,IAOvCpB,EAAAxH,UAAA2H,SAAP,SAAgBM,GACd/H,KAAKqI,iBAAiBZ,SAASM,IAM1BT,EAAAxH,UAAA+I,SAAP,WACE,OAAO7I,KAAKqI,iBAAiBQ,YAMxBvB,EAAAxH,UAAAgJ,WAAP,SAAkBJ,GAChB,OAAO1I,KAAKqI,iBAAiBS,WAAWJ,IAQnCpB,EAAAxH,UAAAiJ,UAAP,SAAiBL,GACf1I,KAAKqI,iBAAiBU,UAAUL,IAM3BpB,EAAAxH,UAAAkJ,eAAP,WACE,OAAOhJ,KAAKqI,iBAAiBW,kBAMxB1B,EAAAxH,UAAAmJ,sBAAP,WACE,OAAOjJ,KAAKiJ,yBAQP3B,EAAAxH,UAAAoJ,IAAP,SAAWC,EAA6BC,GACtC,OAAOpJ,KAAKqI,iBAAiBa,IAAIC,EAAKC,IASjC9B,EAAAxH,UAAAuJ,QAAP,SAAeF,GAAf,IAAAG,EAAAtJ,KACE,OAAO,IAAIuJ,EAAAA,WAAU,SAACC,GACpBpJ,QAAQC,IAAI,gCACZmJ,EAAWnG,KAAKiG,EAAKjB,iBAAiBgB,QAAQF,OAU3C7B,EAAAxH,UAAA2J,cAAP,SAAqBC,GAArB,QAAAJ,EAAAtJ,KACE,GAAIyB,MAAMkI,QAAQD,GAAO,KACjBE,EAAO,OACb,IAAsB,IAAAC,EAAAC,EAAAJ,GAAIK,EAAAF,EAAAxG,QAAA0G,EAAAtG,KAAAsG,EAAAF,EAAAxG,OAAE,CAAvB,IAAM2G,EAAOD,EAAA5G,MAChByG,EAAK7E,KAAK/E,KAAKiK,YAAYD,yGAE7B,OAAO,IAAIT,EAAAA,WAAU,SAACC,GACpBpJ,QAAQC,IAAI,gCACZmJ,EAAWnG,KAAKuG,KAGlB,OAAO,IAAIL,EAAAA,WAAU,SAACC,GACpBpJ,QAAQC,IAAI,gCACZmJ,EAAWnG,KAAKiG,EAAKW,YAAYP,OAShCpC,EAAAxH,UAAAmK,YAAP,SAAmBP,OACXQ,EAAO,GACb,IAAK,IAAMf,KAAOO,EAChB,GAAIA,EAAK/H,eAAewH,GAAM,KACtBgB,EAAST,EAAKP,GACpB,GAAsB,iBAAXgB,GAAuC,EAAhBA,EAAO5H,OAAY,KAC7C6H,EAAMpK,KAAKqI,iBAAiBgB,QAAQc,GAC1CD,EAAKf,GAAOiB,OAEZF,EAAKf,GAAOgB,EAIlB,OAAOD,uBA/LVxJ,EAAAA,sDARC2J,EAAAA,oDAW+ClE,EAAAA,OAAMxF,KAAA,CAAC,2BAN/C8E,KAoMT6B,GA/LE,SAAAA,EACUe,EAAqEpC,EACrEC,GADAlG,KAAAqI,iBAAAA,EAAqErI,KAAAiG,cAAAA,EACrEjG,KAAAkG,WAAAA,ECjBZ,IAAAoE,GAgBgBA,EAAAxD,QAAd,SAAsByD,GACpB,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT,CAAEzD,QAAS,iBAAkB0D,SAAUH,GACvC,CACEvD,QAAS2D,EAAAA,gBACTzD,WAAYlG,EACZmG,KAAM,CAACyD,EAAAA,WAAU,WAAO,OAAA7E,KACxB8E,OAAO,GAET,CACE7D,QAAS2D,EAAAA,gBACTzD,WAAYX,EACZY,KAAM,CAACyD,EAAAA,WAAU,WAAO,OAAAtD,KACxBuD,OAAO,GAET9E,yBAzBPW,EAAAA,SAAQ/F,KAAA,CAAC,CACRmK,aAAc,GACdnE,QAAS,GACTU,QAAS,CACPZ,OA0BJ6D,GA9BA,SAAAA,KCLA,IAAaS,EAAe,CAC1BtK,eAAgB,GAEZuK,EAAUC,EAAAA,cACdF,EACAG,EAAAA,GAAGzL,EAAoB,SAAC0L,EAAOC,GAC7B,MAAA,CAAG3K,eAD4B2K,EAAA5K,QACJC,eAAiB,KAC9CyK,EAAAA,GAAGtL,EAAoB,SAACuL,EAAOC,GAC7B,MAAA,CAAG3K,eAD4B2K,EAAA5K,QACJC,eAAiB,MAGhD,SAAgB4K,EAAkBF,EAAwBG,GACxD,OAAON,EAAQG,EAAOG,GCZxB,IAAaC,EAAiB7L,EAAAA,aAAa,wBAAyBC,EAAAA,SCCvDoL,EAA4B,CACvCS,SAAU,IAENR,EAAUC,EAAAA,cACdF,EACAG,EAAAA,GAAGK,EAAgB,SAACJ,EAAOC,OAAE5K,EAAA4K,EAAA5K,QAC3B,MAAA,CAAGgL,SAAQxJ,EAAA,GAAOxB,EAAQgL,cAG9B,SAAgBC,EAAcN,EAAgCG,GAC5D,OAAON,EAAQG,EAAOG,GCZxB,IAAaI,EAAehM,EAAAA,aAAa,mBAAoBC,EAAAA,SCKhDoL,EAAsB,CAC/BY,YAAY,GAGVX,EAAUC,EAAAA,cACdF,EACAG,EAAAA,GAAGQ,EAAc,SAAAP,GAAS,OAAAnJ,EAAA,GAAMmJ,MAGlC,SAAgBS,EAAcT,EAA0BG,GACpD,OAAON,EAAQG,EAAOG,GCL1B,IAAaO,EAAwC,CACnDC,eAAgBT,EAChBU,WAAYN,EACZO,YAAaJ,OCAbK,GAAAnM,UAAAoM,gBAAA,SAAgB/C,GACdgD,aAAaC,WAAWjD,IAO1B8C,GAAAnM,UAAAuM,aAAA,SAAalD,GAEX,QAAIgD,aAAaG,QAAQnD,IAChBnJ,KAAKuM,aAAaC,QAAQL,aAAaG,QAAQnD,IAAM,IAWhE8C,GAAAnM,UAAA2M,aAAA,SAAatD,EAAahG,OAClBuJ,EAAY1M,KAAKuM,aAAaI,QAAQxJ,GAC5CgJ,aAAaS,QAAQzD,EAAKuD,yBAlC7BhM,EAAAA,mFAEeyF,EAAAA,OAAMxF,KAAA,CAAC,uBAkCvBsL,IAlCE,SAAAA,GAA8ChG,GAAAjG,KAAAiG,cAAAA,EAE9CjG,KAAAuM,aAAe,IAAIM,EAAa7M,KAAKiG,cAAcsB,aAAauF,YCHlE,IAAAC,GAAAC,IAAoCC,EAAAA,GAApCF,GAAoCG,EAAAA,eAY3BF,GAAAG,gBAAP,SAAuBC,GACrB,OAAOA,EAAIC,SAAS,UACjBC,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,KAAM,KAUnBN,GAAAlN,UAAAyN,OAAA,SAAOC,GACL,OAAOC,EAAM,UAAUC,OAAOF,GAAQG,UAGhCX,GAAAlN,UAAA8N,YAAR,SAAoBzE,EAAK0E,OACnBC,EAAMD,EAAU5F,MAAM,KAAK,GAE3B8F,EAAY,GACVC,GAA2C,IAA5BH,EAAUI,QAAQ,KAAeJ,EAAU5F,MAAM,KAAK,GAAK,GAChF,GAAoB,KAAhB+F,EAAoB,CAEtB,IAAK,IAAI5L,GADT2L,EAAYC,EAAY/F,MAAM,MACP1F,OAAS,EAAQ,GAALH,IAAQA,EACjC2L,EAAU3L,GAAG6F,MAAM,KAAK,KAClBkB,GACZ4E,EAAUG,OAAO9L,EAAG,GAGxB0L,EAAMA,EAAM,IAAMC,EAAUI,KAAK,KAEnC,OAAOL,GAGDd,GAAAlN,UAAAsO,SAAR,SAAiBjF,EAAK0E,GAGpB,OAFAA,GAAa,UACbA,GAAa,GAAG7N,KAAKqO,QAAQC,SAASH,KAAK,MAInCnB,GAAAlN,UAAAyO,mBAAV,SAA6BF,OACvBG,EAAMzB,GAAAjN,UAAMyO,mBAAkB/L,KAAAxC,KAACqO,GAqBnC,OApBAG,EAAMxO,KAAK4N,YAAY,QAASY,GAChCA,EAAMxO,KAAKoO,SAAS,QAASI,GACzBH,EAAQI,WACVD,GAAO,cAAcH,EAAQI,UAE3BJ,EAAQK,QACVF,GAAO,UAAUH,EAAQK,OAEW,UAAlCL,EAAQM,wBACVH,GAAO,mBAAmBH,EAAQO,eAAc,0BAA0BP,EAAQM,uBAE9C,SAAlCN,EAAQM,wBACVH,GAAO,mBACLxB,GAAeG,gBAAgBnN,KAAKuN,OAAOc,EAAQO,iBAAgB,0BACzCP,EAAQM,uBAElCN,EAAQQ,WACVL,GAAO,cAAcH,EAAQQ,UAE/BzO,QAAQC,IAAI,gBAAkBmO,GACvBA,GA3EFxB,GAAA8B,UAAY,uCAEZ9B,GAAA+B,eADA/B,GAAAgC,QAAU,8BAC+B,mBA4ElDhC,IA7DE,SAAAA,GAAYqB,QAAA,IAAAA,IAAAA,EAAA,IAAZ,IAAA/E,EACEyD,GAAAvK,KAAAxC,KAAMqO,IAAQrO,KAEd,GAjBFsJ,EAAA2F,UAAYjC,GAAegC,QAAU,oBAI3B1F,EAAA4F,QAAUlC,GAAegC,QAAU,mBACnC1F,EAAA6F,SAAmB,CAC3BC,aAAc,SAWTf,EAAQC,UAAYD,EAAQC,SAAS/L,QAAU,EAClD,MAAM,IAAI8M,MAAM,KAAK/F,EAAKgG,KAAI,kCC5BpC,IAAAC,IAkFEA,GAAAzP,UAAA0P,OAAA,SAAOhB,EAAKiB,EAAuBC,GAAnC,IAAApG,EAAAtJ,KACE,YADU,IAAAyP,IAAAA,EAAA,SAAuB,IAAAC,IAAAA,EAAA,IACO,IAApCpO,OAAOqO,KAAKD,GAAanN,OACpBvC,KAAKqG,KAAK6C,IAAIsF,EAAKiB,GAAa3O,KACrC8O,EAAAA,QAAQF,EAAYG,aACpBC,EAAAA,aAAa,CACXC,gBAAiBL,EAAYM,cAC7BC,YAAaP,EAAYQ,aACzBC,WAAYT,EAAYU,YACxBC,YAAW,SAAE/K,GAEX,OADAgE,EAAKpD,WAAWL,MAAM,2BACf,GAETyK,aAAY,SAAGC,EAAWR,GACxB,OAAAS,KAAKC,IAAI,IAAKF,GAAaR,MAI1B/P,KAAKqG,KAAK6C,IAAIsF,EAAKiB,IAY9BF,GAAAzP,UAAA4Q,QAAA,SAAQlC,EAAKmC,EAAalB,EAAuBC,GAI/C,YAJwB,IAAAD,IAAAA,EAAA,SAAuB,IAAAC,IAAAA,EAAA,IAC/CtP,QAAQC,IAAImO,EAAK,OACjBpO,QAAQC,IAAIsQ,EAAa,eACzBvQ,QAAQC,IAAIoP,EAAa,eACe,IAApCnO,OAAOqO,KAAKD,GAAanN,OACpBvC,KAAKqG,KAAKuK,KACfpC,EACAmC,EACAlB,GACA3O,KACA8O,EAAAA,QAAQF,EAAYG,aACpBC,EAAAA,aAAa,CACXC,gBAAiBL,EAAYM,cAC7BC,YAAaP,EAAYQ,aACzBC,WAAYT,EAAYU,YACxBC,YAAW,SAAE/K,GAEX,OADAlF,QAAQC,IAAI,2BACL,GAETiQ,aAAY,SAAGC,EAAWR,GACxB,OAAAS,KAAKC,IAAI,IAAKF,GAAaR,MAI1B/P,KAAKqG,KAAKuK,KAAKpC,EAAKmC,EAAalB,IAY5CF,GAAAzP,UAAA+Q,WAAA,SAAWC,EAAQtC,EAAKiB,EAAaC,GACnC,YADmC,IAAAA,IAAAA,EAAA,IACK,IAApCpO,OAAOqO,KAAKD,GAAanN,OACpBvC,KAAKqG,KAAK0K,QAAQD,EAAQtC,EAAKiB,GAAa3O,KACjD8O,EAAAA,QAAQF,EAAYG,aACpBC,EAAAA,aAAa,CACXC,gBAAiBL,EAAYM,cAC7BC,YAAaP,EAAYQ,aACzBC,WAAYT,EAAYU,YACxBC,YAAW,SAAE/K,GAGX,OADAlF,QAAQC,IAAI,2BACL,GAETiQ,aAAY,SAAGC,EAAWR,GACxB,OAAAS,KAAKC,IAAI,IAAKF,GAAaR,MAI1B/P,KAAKqG,KAAKuK,KAAKE,EAAQtC,EAAKiB,yBA7JxC/O,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDARLwG,EAAAA,kBAIA3B,qCAWJU,EAAAA,OAAMxF,KAAA,CAAC,gMAHV,SAAA4O,GACUlJ,EACAH,EACyBD,GAFzBjG,KAAAqG,KAAAA,EACArG,KAAAkG,WAAAA,EACyBlG,KAAAiG,cAAAA,EAGnCjG,KAAAgR,SAAWhR,KAAKiG,cAAcsB,aAAayJ,SCnB7C,IAAaC,GAAW,WCUXC,GAAa,IAAIC,EAAAA,QAC9BC,IAaEA,GAAAtR,UAAAuR,iBAAA,SAAiBC,GACftR,KAAKM,MAAMC,SAASgL,EAAe,CAAE/K,QAAS,CAAEgL,SAAU8F,OAOtDF,GAAAtR,UAAAyR,YAAN,kFAQE,OANAvR,KAAKwR,UAAUtR,UAAS,SAAEC,GACgB,EAApCmB,OAAOqO,KAAKxP,EAAKqL,UAAUjJ,SAC7B0O,EAAW9Q,EAAKqL,YAIpB,CAAA,EAAOyF,QAOTG,GAAAtR,UAAA2R,oBAAA,SAAoBtG,GAClBnL,KAAKkG,WAAW7F,IAAI,sCAAuC8K,GAC3DnL,KAAKM,MAAMC,SAASmL,EAAaP,IACjC+F,GAAW7N,KAAK8H,IAOZiG,GAAAtR,UAAA4R,eAAN,kFAOE,OALA1R,KAAK2R,YAAYzR,UAAS,SAAEiL,GACxBa,EAAcb,IAElBnL,KAAKkG,WAAW7F,IAAI,8BAA4B2L,GAChDkF,GAAW7N,KAAK2I,EAAYL,YAC5B,CAAA,EAAOK,EAAYL,sCArDtBjL,EAAAA,uDARQG,EAAAA,aAGA4E,KA6DT2L,IAnDE,SAAAA,GACU9Q,EACA4F,GADAlG,KAAAM,MAAAA,EACAN,KAAAkG,WAAAA,EAERlG,KAAKwR,UAAYxR,KAAKM,MAAMQ,KAAKC,EAAAA,OAAO,eACxCf,KAAK2R,YAAcrR,EAAMQ,KAAKC,EAAAA,OAAO,wBCIjC6Q,GAAA9R,UAAA+R,cAAN,SAAoBhO,EAA0BiO,2FACtB,MAAA,CAAA,EAAM9R,KAAK+R,SAASlO,EAAMiO,WAChD,MAAA,CAAA,EADsB1G,EAAAjH,cAQlByN,GAAA9R,UAAAkS,aAAN,SAAmBnO,oEACjB,MAAA,CAAA,EAAO7D,KAAKiS,WAAWvB,QAAQ1Q,KAAKiG,cAAciM,aAAaC,oBAAqBtO,GAAMuO,kBAS9ER,GAAA9R,UAAAiS,SAAd,SAAuBlO,EAAMiO,mGAEgB,6BAAA,CAAA,EAAM9R,KAAKgS,aAAanO,WACjE,OADMwO,EAAmCjH,EAAAjH,QAC3BmO,cAAiBD,EAASE,eAMtC1O,EAAKyO,aAAeD,EAASC,aAC7BzO,EAAK0O,cAAgBF,EAASE,cAE9BvS,KAAKwS,aAAanB,iBAAiBxN,GACnC7D,KAAKyS,aAAahG,aAAawE,GAAUpN,GACzC,CAAA,EAAOA,KATP7D,KAAKwS,aAAanB,iBAAiB,IACnCrR,KAAKyS,aAAavG,gBAAgB+E,IAClC,CAAA,EAAOoB,WAWT,mBAAM/M,iBAAiBoN,YAMC,IAAbC,EAAEC,QAMW,MAAbD,EAAEC,QAXX5S,KAAK6S,WAAWjN,MAAM,iCAAmCkM,EAAU,IAAKa,EAAErN,MAAMwM,SAChF9R,KAAK6S,WAAWxS,IAAI,4DACpBwD,EAAK+O,OAASD,EAAEC,OAChB/O,EAAKiO,QAAUa,EAAErN,MAAMwM,UAkBvB9R,KAAK6S,WAAWjN,MACd,qCAAqCkM,EAAO,IAAIa,EAAEC,OAAM,0BAChCd,EAAO,MAAMa,EAAErN,OAEzCtF,KAAKwS,aAAanB,iBAAiB,IACnCrR,KAAKyS,aAAavG,gBAAgB+E,KAtBlC,CAAA,EAAOpN,0BAmCP+N,GAAA9R,UAAAgT,WAAN,2GAC+B,MAAA,CAAA,EAAM9S,KAAKwS,aAAajB,6BAA/CwB,EAAuB3H,EAAAjH,OACvB6O,EAAmBhT,KAAKyS,aAAapG,aAAa4E,IACxDjR,KAAK6S,WAAWxS,IAAI,kCAAmC2S,GACvDhT,KAAK6S,WAAWxS,IAAI,0BAA2B0S,GAE3CA,GAAwBC,EACd,CAAA,EAAMhT,KAAKiT,iBAAiBD,IADtC,CAAA,EAAA,UAEF,MAAA,CAAA,EADY5H,EAAAjH,sBAEH4O,GAAyBC,EAAzB,CAAA,EAAA,IACThT,KAAKyS,aAAahG,aAAawE,GAAU8B,GAC7B,CAAA,EAAM/S,KAAKiT,iBAAiBF,YACxC,MAAA,CAAA,EADY3H,EAAAjH,sBAEF4O,IAAwBC,EAAzB,CAAA,EAAA,IACThT,KAAKwS,aAAanB,iBAAiB2B,GACvB,CAAA,EAAMhT,KAAKiT,iBAAiBD,YACxC,MAAA,CAAA,EADY5H,EAAAjH,eAGZ,MAAA,CAAA,GAAO,SAWLyN,GAAA9R,UAAAmT,iBAAN,SAAuBD,kGACHhT,KAAKkT,cAAcF,EAAYV,eAE/CtS,KAAK6S,WAAWhN,MAAM,+DACV,CAAA,EAAM7F,KAAKmT,oBAAoBH,KAFzC,CAAA,EAAA,UAGF,MAAA,CAAA,EADY5H,EAAAjH,eAGZ,MAAA,CAAA,GAAO,SAUXyN,GAAA9R,UAAAoT,cAAA,SAAcZ,GAEZ,OADe,IAAIc,EAAAA,kBACLC,eAAef,IAQjBV,GAAA9R,UAAAqT,oBAAd,SAAkCG,iGAOjB,OANTzP,EAA2B,CAC/B0P,UAAWvT,KAAKiG,cAAciM,aAAasB,eAC3CC,WAAY,gBACZlB,cAAee,EAAKf,eAGP,CAAA,EAAMvS,KAAK+R,SAASlO,EAAM,yBACzC,MAAA,CAAA,EADeuH,EAAAjH,cAQXyN,GAAA9R,UAAA4T,iBAAN,yGACe,MAAA,CAAA,EAAM1T,KAAK2T,kBAGxB,OAHML,EAAOlI,EAAAjH,OAGb,CAAA,GAFe,IAAIiP,EAAAA,kBACSQ,YAAYN,EAAKhB,cACzBuB,WAOhBjC,GAAA9R,UAAA6T,QAAN,gHACML,EAAYtT,KAAKyS,aAAapG,aAAa4E,IAChC,IAAImC,EAAAA,iBACfE,GACgBtT,KAAKkT,cAAcI,EAAKhB,eAExCtS,KAAK6S,WAAWxS,IACd,iEAEK,CAAA,EAAML,KAAKmT,oBAAoBG,KANtC,CAAA,EAAA,UAMAA,EAAOlI,EAAAjH,OACPnE,KAAK6S,WAAWxS,IAAI,sCAAwCiT,oBAGhE,MAAA,CAAA,EAAOA,8BA3LV5S,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDARL2O,UACAtD,UAGAxG,SACA2L,sCAcJjL,EAAAA,OAAMxF,KAAA,CAAC,gNALV,SAAAiR,GACUK,EACAQ,EACAI,EACAL,EACyBvM,GAJzBjG,KAAAiS,WAAAA,EACAjS,KAAAyS,aAAAA,EACAzS,KAAA6S,WAAAA,EACA7S,KAAAwS,aAAAA,EACyBxS,KAAAiG,cAAAA,ECJrC,IAAa6N,GAA0B,qBAE1BC,GAAc,CACzBC,iBAAkB,UAClBC,aAAc,KACdC,sBAAuB,KACvBC,WAAY,MACZC,sBAAuB,UACvBC,aAAc,WAGHC,GAAiB,CAC5BN,iBAAkB,UAClBC,aAAc,KACdC,sBAAuB,KACvBC,WAAY,MACZC,sBAAuB,UACvBC,aAAc,WAEHE,GAAa,CACxBzC,QAAS,GACTc,OAAQ,GACR4B,YAAa,GACbC,aAAc,QCCRC,GAAA5U,UAAA6U,WAAN,SAAiBC,EAAYC,eAAA,IAAAA,IAAAA,EAAA,0GAGR,oBAFnBD,EAAaA,EAAWE,QAItBC,EAAW,IAAI/H,GAAchL,EAAA,GAAMhC,KAAKgV,YAAgBhV,KAAKiV,yBACrC,gBAAfL,IAETG,EAAW,IAAI/H,GAAchL,EAAA,GAAMhC,KAAKgV,YAAgBhV,KAAKkV,uBAEzDC,EAA+B,CACnC1B,WAAYK,GACZP,UAAWwB,EAAS1G,QAAQ+G,SAC5BC,aAAcN,EAAS1G,QAAQiH,YAC/BC,cAAevI,GAAeG,gBAC5B4H,EAAS1G,QAAQO,iBAGrB5O,KAAKkG,WAAW7F,IAAI,yBAA2BL,KAAKiB,cAAcgF,eAClEjG,KAAKkG,WAAW7F,IAAI,iCAAmC8U,GACvDnV,KAAKkG,WAAW7F,IAAI,qCAAuC0U,GAErDS,EAAMjB,oBAED,6BAAA,CAAA,EAAMvU,KAAKyV,MAAMV,EAAUI,EAAUP,EAAYC,WAC1D,MAA4B,MAD5BrR,EAAS4H,EAAAjH,QACEmO,cAAuB9O,EAAO8O,eAAiBoD,WACxD1V,KAAKkG,WAAWN,MAAM,oBACtB5F,KAAKkG,WAAWN,MAAMpC,GACtBgS,EAAI1D,QAAU,eACd0D,EAAI5C,OAAS,MAGb5S,KAAKkG,WAAW7F,IAAI,yBACpBL,KAAKkG,WAAW7F,IAAImD,GACpBgS,EAAI1D,QAAU,gBACd0D,EAAI5C,OAAS,IACb4C,EAAIhB,YAAchR,EAAO8O,aACzBkD,EAAIf,aAAejR,EAAO+O,eAP1B,CAAA,EAAOiD,4BAWTG,EAAAA,WAAWC,gCAQTlB,GAAA5U,UAAA+V,aAAN,4EACE,IAGE,OAFA7V,KAAKwS,aAAanB,iBAAiB,IACnCrR,KAAKyS,aAAavG,gBAAgB+E,IAClC,CAAA,GAAO,GACP,MAAO6E,GACPH,EAAAA,WAAWG,kBAUTpB,GAAA5U,UAAA2V,MAAN,SAAYV,EAAUI,EAAUP,EAAYC,wGAGxC7U,KAAK+V,MADU,YAAblB,EACW,IAAImB,EAAAA,aAEJ,IAAIC,EAAAA,aAEfjW,KAAKkW,oBAAsBR,WAA4D,IAA/CpU,OAAOqO,KAAK3P,KAAKkW,mBAAmB3T,SAC9EvC,KAAKkW,kBAAoBnC,IAEvB/T,KAAKmW,uBAAyBT,WAA+D,IAAlDpU,OAAOqO,KAAK3P,KAAKmW,sBAAsB5T,SACpFvC,KAAKmW,qBAAuB7B,IAEX,mBAAfM,EAAA,CAAA,EAAA,GACI,CAAA,EAAM5U,KAAK+V,MAAMK,SAASrB,EAAU/U,KAAKkW,kCAA/CV,EAAMpK,EAAAjH,0BACkB,gBAAfyQ,EAAA,CAAA,EAAA,GACH,CAAA,EAAM5U,KAAK+V,MAAMK,SAASrB,EAAU/U,KAAKmW,8BAA/CX,EAAMpK,EAAAjH,+BAGFqR,GACJL,EAASkB,KAAOb,EAAIa,KACP,CAAA,EAAMrW,KAAKsW,YAAYzE,cAAcsD,EAAUP,KAF1D,CAAA,EAAA,UAGF,MAAA,CAAA,EADaxJ,EAAAjH,oDA7GlBzD,EAAAA,uDAZQkR,UACAnM,SAQAM,SAPAqL,UACAnF,sCAiBJ9F,EAAAA,OAAMxF,KAAA,CAAC,uBA0GZ+T,IAhHE,SAAAA,GACU4B,EACApQ,EACAjF,EACAuR,EACAC,EACyBxM,GALzBjG,KAAAsW,YAAAA,EACAtW,KAAAkG,WAAAA,EACAlG,KAAAiB,cAAAA,EACAjB,KAAAwS,aAAAA,EACAxS,KAAAyS,aAAAA,EACyBzS,KAAAiG,cAAAA,EAInCjG,KAAAgV,YAAc,CAAEI,SAAUpV,KAAKiG,cAAciM,aAAasB,gBAC1DxT,KAAAiV,uBAAyBjV,KAAKiG,cAAciM,aAAa+C,uBACzDjV,KAAAkV,oBAAsBlV,KAAKiG,cAAciM,aAAagD,oBACtDlV,KAAAkW,kBAAoBlW,KAAKiG,cAAciM,aAAagE,kBACpDlW,KAAAmW,qBAAuBnW,KAAKiG,cAAciM,aAAaiE,qBCnCzD,IAAAI,IAsBEA,GAAAzW,UAAA0W,YAAA,WAAA,IAAAlN,EAAAtJ,KACEA,KAAKkG,WAAW7F,IAAI,wCACdoW,EAAiBzW,KAAKiG,cAAcsB,aAAakP,eACvD,IACI,OAAOzW,KAAKsW,YAAYxD,aAAanP,KAAI,SAACmP,GAExC,OADAxJ,EAAKpD,WAAW7F,IAAI,oBAAqByS,GACrCA,GACFxJ,EAAKpD,WAAW7F,IAAI,8BACb,IAEPiJ,EAAKpD,WAAWL,MAAM,qCACtByD,EAAKoN,OAAOC,SAAS,CAAC,IAAMF,KACrB,KAGX,MAAOX,GAEP,OADA9V,KAAKkG,WAAWN,MAAM,uCACf,yBAjCdlF,EAAAA,uDAHQ+E,SACAmM,UAHagF,EAAAA,0CAabzQ,EAAAA,OAAMxF,KAAA,CAAC,uBA4BhB4V,IAhCE,SAAAA,GACcrQ,EACAoQ,EACAI,EACyBzQ,GAHzBjG,KAAAkG,WAAAA,EACAlG,KAAAsW,YAAAA,EACAtW,KAAA0W,OAAAA,EACyB1W,KAAAiG,cAAAA,ECSzC,IAAa4Q,GAAmBC,EAAAA,QAAQ,kBAAmB,CACzDC,EAAAA,WAAW,0BAA2B,CACpCC,EAAAA,MACE,iBACAC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,SAClD,CAAEC,UAAU,IAEdC,EAAAA,MAAM,CACJN,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,qBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAE7C,CAAEF,UAAU,IAEdL,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,mBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,wBAE7C,CAAEF,UAAU,QAIlBN,EAAAA,WAAW,2BAA4B,CACrCC,EAAAA,MACE,iBACAC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,SAClD,CAAEC,UAAU,IAEdC,EAAAA,MAAM,CACJN,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,qBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAE7C,CAAEF,UAAU,IAEdL,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,mBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,wBAE7C,CAAEF,UAAU,QAIlBN,EAAAA,WAAW,4BAA6B,CACtCC,EAAAA,MACE,iBACAC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,SAClD,CAAEC,UAAU,IAEdC,EAAAA,MAAM,CACJN,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,qBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAE7C,CAAEF,UAAU,IAEdL,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,mBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,wBAE7C,CAAEF,UAAU,QAIlBN,EAAAA,WAAW,0BAA2B,CACpCC,EAAAA,MACE,iBACAC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,SAClD,CAAEC,UAAU,IAEdC,EAAAA,MAAM,CACJN,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,sBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAE7C,CAAEF,UAAU,IAEdL,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,mBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,uBAE7C,CAAEF,UAAU,QAIlBN,EAAAA,WAAW,2BAA4B,CACrCC,EAAAA,MACE,iBACAC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,SAClD,CAAEC,UAAU,IAEdC,EAAAA,MAAM,CACJN,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,sBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAE7C,CAAEF,UAAU,IAEdL,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,mBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,uBAE7C,CAAEF,UAAU,QAIlBN,EAAAA,WAAW,4BAA6B,CACtCC,EAAAA,MACE,iBACAC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,OAAQC,OAAQ,SAClD,CAAEC,UAAU,IAEdC,EAAAA,MAAM,CACJN,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,sBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAE7C,CAAEF,UAAU,IAEdL,EAAAA,MACE,SACA,CACEC,EAAAA,MAAM,CAAEM,UAAW,mBACnBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,uBAE7C,CAAEF,UAAU,QAIhBN,EAAAA,WAAW,aAAc,CACvBC,EAAAA,MAAM,iBAAkBC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,SAAW,CAAEE,UAAU,IACjFC,EAAAA,MAAM,CACFN,EAAAA,MAAM,SAAU,CAACC,EAAAA,MAAM,CAAEM,UAAW,sBAAwBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAAuB,CAC1HF,UAAU,IAEdL,EAAAA,MAAM,SAAU,CAACC,EAAAA,MAAM,CAAEM,UAAW,mBAAqBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,uBAAyB,CACzHF,UAAU,QAIpBN,EAAAA,WAAW,aAAc,CACvBC,EAAAA,MAAM,iBAAkBC,EAAAA,MAAM,CAAEC,SAAU,QAASC,MAAO,SAAW,CAAEE,UAAU,IACjFC,EAAAA,MAAM,CACFN,EAAAA,MAAM,SAAU,CAACC,EAAAA,MAAM,CAAEM,UAAW,qBAAuBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,qBAAuB,CACzHF,UAAU,IAEdL,EAAAA,MAAM,SAAU,CAACC,EAAAA,MAAM,CAAEM,UAAW,mBAAqBC,EAAAA,QAAQ,eAAgBP,EAAAA,MAAM,CAAEM,UAAW,wBAA0B,CAC1HF,UAAU,cC7KhBI,GAAA3X,UAAA4X,uBAAN,SAA6BC,EAAkBC,EAAeC,2FAK5D,OAJA7X,KAAKkG,WAAW7F,IAAI,2BAAyBsX,GAC7C3X,KAAKkG,WAAW7F,IAAI,uBAAqBuX,GACzC5X,KAAKkG,WAAW7F,IAAI,uBAAqBwX,GAEzC,CAAA,EAAMC,EAAAA,MAAM,aAEZ,OAFA1M,EAAAjH,OAEA,CAAA,EAAO,iBASHsT,GAAA3X,UAAAiY,uBAAN,SAA6BJ,EAAkBC,EAAeC,2FAK5D,OAJA7X,KAAKkG,WAAW7F,IAAI,2BAAyBsX,GAC7C3X,KAAKkG,WAAW7F,IAAI,uBAAqBuX,GACzC5X,KAAKkG,WAAW7F,IAAI,uBAAqBwX,GAEzC,CAAA,EAAMC,EAAAA,MAAM,aAEZ,OAFA1M,EAAAjH,OAEA,CAAA,EAAO,sCApCVzD,EAAAA,uDAJQ+E,KA2CTgS,IArCE,SAAAA,GACUvR,GAAAlG,KAAAkG,WAAAA,ECTZ,IAAa8R,GAQc,KARdA,GASsB,EATtBA,GAUgB,KAInB,WACA,WACC,SA+CEC,GAA+B,qEAK/BC,GAAqB,8DAGxB,WACA,WACC,aClCHC,GAAArY,UAAAsY,cAAN,SAAoB5D,+GAEO,6BAAA,CAAA,EAAMxU,KAAKqY,kBAAkB7D,WAA9C8D,EAAiBC,EAAApU,OACjBX,EAAsC,OAC5C,IAAqBgV,EAAA1O,EAAAxI,OAAOqO,KAAK2I,EAAeG,QAAMC,EAAAF,EAAAnV,QAAAqV,EAAAjV,KAAAiV,EAAAF,EAAAnV,OAA3CsV,EAAMD,EAAAvV,MACfK,EAAOuB,KAAKuT,EAAeG,MAAME,wGAEnC,MAAA,CAAA,EAAO,CAAEF,MAAOjV,EAAQ6O,SAAUiG,WAGlC,kBADAlY,QAAQkF,MAAM,0DAA4DsT,KAAKC,UAAUC,IACzF,CAAA,EAAO,CAAEL,MAAO,GAAIpG,SAAU,8BAI5B8F,GAAArY,UAAAuY,kBAAN,SAAwB7D,2GAME,cAJTuE,EAAAA,YAAWC,QACtBC,eAAgB,mBAEhB3G,aAAgBkC,GAChB+D,EAAA,mBAAoB,CAAA,EAAMvY,KAAKsW,YAAY5C,2BAWT,OAfpCtI,EAAA8N,QAAS,IAAAV,EAAA/V,MAAIsW,EAAAA,YAAW,MAAA,GAItBL,EAAAH,GAAoBY,EAAAhV,aAKlBuL,EAAc,CAClBG,YAAasI,GAAkBtI,YAC/BG,cAAemI,GAAkBnI,cACjCE,aAAciI,GAAkBjI,aAChCE,YAAa+H,GAAkB/H,aAEK,CAAA,EAAMpQ,KAAKiS,WAAWzC,OAPhD0I,oEAOyExI,GAAa0C,oBAGlG,OAHMgH,EAAgCD,EAAAhV,OAEtCnE,KAAKkG,WAAW7F,IAAI+Y,GACpB,CAAA,EAAOA,SAGHjB,GAAArY,UAAAuZ,kBAAN,SAAwB7E,EAAqBmE,EAAgBW,oGACrD9V,EAAoB,OAC1B,IAAwBkV,EAAA5O,EAAAxI,OAAOqO,KAAK2J,EAAQb,MAAME,GAAQY,WAAShB,EAAAG,EAAArV,QAAAkV,EAAA9U,KAAA8U,EAAAG,EAAArV,OAAE,CAA1DmW,EAASjB,EAAApV,MACZsW,EAAoB,CACxBC,YAAa,QAEf,IAAqBP,EAAArP,EAAAxI,OAAOqO,KAAK2J,EAAQb,MAAME,GAAQY,SAASC,GAAWG,kBAAgBC,EAAAT,EAAA9V,QAAAuW,EAAAnW,KAAAmW,EAAAT,EAAA9V,OAAhFwW,EAAMD,EAAAzW,MACfsW,EAASK,SAAWN,EACpBpZ,QAAQC,IAAI,mBAAqBwZ,GAC3BH,EAAcJ,EAAQb,MAAME,GAAQY,SAASC,GAAWG,gBAAgBE,GAC9EzZ,QAAQC,IAAI,mBAAqBsY,GACjCvY,QAAQC,IAAIqZ,GACRA,EAAYK,OAASC,IACvBN,EAAYK,OAASC,IACrBN,EAAYK,OAASC,KACfC,EAA+B,CACnC3G,KAAMoG,EAAYpG,KAClB4G,SAAUR,EAAYQ,SACtBH,KAA2B,UAArBL,EAAYK,KAAmBI,GACd,UAArBT,EAAYK,KAAmBI,GACR,WAArBT,EAAYK,KAAoBI,GAC9B,MAER/Z,QAAQC,IAAI,qBAAuBuY,KAAKC,UAAUoB,IAClDR,EAASC,YAAY3U,KAAKkV,wGAG9BzW,EAAOuB,KAAK0U,wGAEd,MAAA,CAAA,EAAOjW,QAGH2U,GAAArY,UAAAsa,cAAN,SAAoB5F,EAAqB6F,6GAMf,OALxBja,QAAQC,IAAI,qCAAuCmU,EAAc,eAAiB6F,UAEnEtB,EAAAA,YAAWC,QACtBC,eAAgB,mBAChB3G,aAAckC,GACd+D,EAAA,mBAAoB,CAAA,EAAMvY,KAAKsW,YAAY5C,2BAWP,OAdtCtI,EAAA8N,QAAS,IAAAV,EAAA/V,MAAIsW,EAAAA,YAAW,MAAA,GAGtBL,EAAAH,GAAoBY,EAAAhV,aAIlBqK,EAAM0J,GAAqB,gBAAkBmC,EAC7C3K,EAAc,CAClBG,YAAasI,GAAkBtI,YAC/BG,cAAemI,GAAkBnI,cACjCE,aAAciI,GAAkBjI,aAChCE,YAAa+H,GAAkB/H,aAEO,CAAA,EAAMpQ,KAAKiS,WAAWzC,OAAOhB,IAAkBkB,GAAa0C,oBAGpG,OAHMkI,EAAkCnB,EAAAhV,OAExCnE,KAAKkG,WAAW7F,IAAIia,GACpB,CAAA,EAAOA,SA1GMnC,GAAAnI,cAAgB,IAChBmI,GAAAjI,aAAe,IACfiI,GAAA/H,YAAc,EACd+H,GAAAtI,YAAc,yBAP9BnP,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDAlBLwG,EAAAA,kBAGAwK,UACArC,UACA9J,6KAyBP,SAAA0S,GACUoC,EACAjE,EACArE,EACA/L,GAHAlG,KAAAua,WAAAA,EACAva,KAAAsW,YAAAA,EACAtW,KAAAiS,WAAAA,EACAjS,KAAAkG,WAAAA,EANFlG,KAAAwa,YAAc,4BCd2BvN,EAAAA,MAAAoC,OAOnDoL,IANE,SAAAA,GAAYvV,GAAZ,IAAAoE,EACEyD,GAAAvK,KAAAxC,KAAMkF,IAAElF,YAGRsB,OAAOC,eAAe+H,EAAMmR,GAA8B3a,wBAIdmN,EAAAA,MAAAoC,OAOhDqL,IANE,SAAAA,GAAYxV,GAAZ,IAAAoE,EACEyD,GAAAvK,KAAAxC,KAAMkF,IAAElF,YACRsJ,EAAKgG,KAAO,6BAEZhO,OAAOC,eAAe+H,EAAMmR,GAA8B3a,qBA2CtD6a,GAAA7a,UAAA8a,QAAN,SACEC,EACAC,EACAhK,EACAjN,EACAqV,EACA6B,EACAC,EACAC,EACAC,EACAC,eAPA,IAAArK,IAAAA,EAAA,YACA,IAAAjN,IAAAA,EAAA,WAGA,IAAAmX,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,QACA,IAAAC,IAAAA,EAAA,CAA6CE,YAAU,SACvD,IAAAD,IAAAA,EAAA,2JAEMzL,EAAc,CAClBG,YAAa8K,GAAeU,kBAC5BrL,cAAe2K,GAAeW,oBAC9BpL,aAAcyK,GAAeY,mBAC7BnL,YAAa4K,IAIVD,GAAkB/a,KAAKwb,oBAExBT,EADE/a,KAAKyb,YACU,QACRzb,KAAK0b,aACG,SAGAhG,WAOfiG,EACe,UAAnBZ,EACIZ,GACAA,OAGN,IAAoB3B,EAAA1O,EAAA+Q,EAAQnB,aAAWhB,EAAAF,EAAAnV,QAAAqV,EAAAjV,KAAAiV,EAAAF,EAAAnV,QAA5BuY,EAAKlD,EAAAvV,OAEJ4W,OAAS4B,IACjBE,EAAWD,EAAMtI,KACjB4G,EAAW0B,EAAM1B,8GAIrB,GAAI2B,IAAanG,WAAawE,IAAaxE,UACzC,MAAM,IAAIrG,MAAM,wCAGK,WAAnB0L,EAAA,CAAA,EAAA,KACF/a,KAAKkG,WAAW7F,IAAI,wBACdsQ,EAAc,CAClBmL,MAAOjB,EAAQiB,MACfD,SAAQA,EACR3B,SAAQA,EACR6B,YAAajB,EACbhK,OAAMA,EACNjN,KAAM6R,WAGmB,SAAzB5E,EAAOkL,eACkB,QAAzBlL,EAAOkL,eACkB,UAAzBlL,EAAOkL,gBAEPrL,EAAY9M,KAAO+U,KAAKC,UAAUhV,IAElB,CAAA,EAAM7D,KAAKsW,YAAY3C,mBAAnCL,EAAYsG,EAAAzV,OAEZ8X,EAAgB,CACpB3J,aAAcgB,EAAKhB,+BAMf,6BAFJiG,EAAA0D,EACE9C,EAAA,mBACE,CAAA,EAAMnZ,KAAKsW,YAAY5C,kCAF3B6E,EAAAY,GAEIS,EAAAzV,sCAEJnE,KAAKkG,WAAWN,MAAMkT,gBAElBtK,EAAMyJ,GAA+B,oBACrCiE,EAAa,CACjBhD,QAAS+C,oBAGW,6BAAA,CAAA,EAAMjc,KAAKiS,WAAWvB,QAAQlC,EAAKmC,EAAauL,EAAYxM,GAAa0C,oBAG7F,OAHM+J,EAAcvC,EAAAzV,OACpBnE,KAAK0b,cAAe,EACpB1b,KAAKwb,mBAAoB,EACzB,CAAA,EAAOW,4BAEPnc,KAAKkG,WAAWN,MACd,wDACAgT,KAAKC,UAAUuD,IAEjBpc,KAAK0b,cAAe,uCAEM,UAAnBX,GAAiD,UAAnBA,EAA9B,MAAA,CAAA,EAAA,IACT/a,KAAKkG,WAAW7F,IAAI,uBACdgc,EAAkB,SAAWC,KAAKT,EAAW,IAAM3B,sBAkBnC,gCAfdzK,EAAc,CAClByJ,QAAS,CAAEqD,cAAeF,IAGD,QAAzBvL,EAAOkL,eACkB,YAAzBlL,EAAOkL,gBAGPvM,EAAkB,KAAI5L,GAGxB4L,EAA0B,aAAI0L,EACxB3M,EAAM,UAAYqM,EAAQ2B,QAAU,SAAW1B,EAGjC,CAAA,EAAM9a,KAAKiS,WAAWpB,WAAWC,EAAQtC,EAAKiB,EAAaC,GAAa0C,qBAG5F,OAHM+J,EAAcvC,EAAAzV,OACpBnE,KAAKyb,aAAc,EACnBzb,KAAKwb,mBAAoB,EACzB,CAAA,EAAOW,6BAEPnc,KAAKkG,WAAWN,MACd,uDACAgT,KAAKC,UAAU4D,IAEjBzc,KAAKyb,aAAc,EACdV,EAAD,CAAA,EAAA,IACK,CAAA,EAAM/a,KAAK4a,QAChBC,EACAC,EACAhK,EACAjN,EACAqV,EACA,mBANF,MAAA,CAAA,EAAOU,EAAAzV,gBASP,MAAMsY,uDAGA1B,EAAD,MAAA,CAAA,EAAA,KAEO,IAAI2B,MAAOC,UACrBC,EAAqB,CAAExB,YAAU,GACjCyB,EAAsB,CAAEzB,YAAU,GAClC0B,EAAgB9c,KAAK4a,QACzBC,EACAC,EACAhK,EACAjN,EACAqV,EACA,SACAxD,UACAA,UACAmH,GAEIE,EAAe/c,KAAK4a,QACxBC,EACAC,EACAhK,EACAjN,EACAqV,EACA,QACAxD,UACAA,UACAkH,sBAIiB,gCAAA,CAAA,EAAM7Z,QAAQia,KAAK,CAACF,EAAeC,aAGpD,OAHM1K,EAAWuH,EAAAzV,OACjByY,EAAmBxB,aAAW,EAC9ByB,EAAoBzB,aAAW,EAC/B,CAAA,EAAO/I,sBAGPrS,KAAKkG,WAAWN,MAAM,oDAAsDqX,GAIxEzZ,OAAM,qBAEC,gCAAA,CAAA,EAAMsZ,kBAAftZ,EAASoW,EAAAzV,OACTnE,KAAK0b,cAAe,mCAEpB1b,KAAK0b,cAAe,EACpB1b,KAAKkG,WAAWN,MACd,6DACAgT,KAAKC,UAAUqE,mBAIR,gCAAA,CAAA,EAAMH,kBAAfvZ,EAASoW,EAAAzV,OACTnE,KAAKyb,aAAc,mCAEnBzb,KAAKyb,aAAc,EACnBzb,KAAKkG,WAAWN,MACd,4DACAgT,KAAKC,UAAUsE,mBAGnB,GAAI3Z,IAAWkS,UACb,MAAM,IAAIrG,MAAM,iDAElB,MAAA,CAAA,EAAO7L,2BAWPmX,GAAA7a,UAAAsd,mCAAN,SACEvC,EACAwC,EACAC,eADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,uGAWIA,EACW,CAAA,EAAMtd,KAAK4a,QACtBC,EACA,gBACA,MACA,KACA,KACA,OAPA,CAAA,EAAA,iBACF0C,EAAanS,EAAAjH,oBASA,MAAA,CAAA,EAAMnE,KAAK4a,QACtBC,EACA,gBACA,MACA,KACA,KACA,KACA,EACA,WARF0C,EAAanS,EAAAjH,wBAef,IAAWqZ,KAHLC,EAAe,GACrBzd,KAAKkG,WAAW7F,IAAI,gCAAkCuY,KAAKC,UAAU0E,IAEhDA,EAAWG,SACxBC,EAASJ,EAAWG,QAAQF,IAEzBrd,KAAKyd,eAAeza,QAC3B6U,IACA2F,EAAOxd,KAAK0d,sBAAsB1a,QAClC6U,IACA2F,EAAOxd,KAAK2d,wBAAwB3a,QACpC6U,IAEAyF,EAAa1Y,KAAK,CAChByY,OAAMA,EACNO,UAAWJ,EAAOxd,KAAK4d,UAAU5a,QAKvC,MAAA,CAAA,EAAOsa,SAMH9C,GAAA7a,UAAAke,SAAN,2FASMrD,GAAA7a,UAAAme,YAAN,SAAkBzJ,EAAqBqG,2EACrC7a,KAAKkG,WAAW7F,IAAImU,GACpBxU,KAAKyS,aAAahG,aAAazM,KAAKwa,YAAa5B,KAAKC,UAAUgC,aAO5DF,GAAA7a,UAAAoe,iBAAN,SAAuB1J,0EAOrB,OANAxU,KAAKkG,WAAW7F,IAAI,6BAA8BmU,GAC5C2J,EAAmBvF,KAAKC,UAAU7Y,KAAKyS,aAAapG,aACxDrM,KAAKwa,cAEPxa,KAAKkG,WAAW7F,IAAI8d,GAEpB,CAAA,EADoBvF,KAAKwF,MAAMD,SAhVlBxD,GAAA0D,qBAAuB,IACvB1D,GAAA2D,oBAAsB,IACtB3D,GAAA4D,mBAAqB,IAErB5D,GAAAW,oBAAsB,IACtBX,GAAAY,mBAAqB,IACrBZ,GAAAU,kBAAoB,yBAVpC3a,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDAjCLwG,EAAAA,kBACA+Q,UACAvG,UACA3F,UACAsD,UACA9J,uMA8CP,SAAAkV,GACUtU,EACAmY,EACAlI,EACA7D,EACAR,EACA/L,GALAlG,KAAAqG,KAAAA,EACArG,KAAAwe,kBAAAA,EACAxe,KAAAsW,YAAAA,EACAtW,KAAAyS,aAAAA,EACAzS,KAAAiS,WAAAA,EACAjS,KAAAkG,WAAAA,EAbVlG,KAAAye,WAAa,eAILze,KAAAwb,mBAAoB,EACpBxb,KAAAwa,YAAc,yBC1BhBkE,GAAA5e,UAAA6e,kBAAN,SAAwB9D,EAAkB+D,EAAapK,6GAM7B,cAJTuE,EAAAA,YAAWC,QACtBC,eAAgB,mBAEhB3G,aAAgBkC,GAChB+D,EAAA,mBAAoB,CAAA,EAAMvY,KAAKsW,YAAY5C,2BAWlB,OAf3BtI,EAAA8N,QAAS,IAAAV,EAAA/V,MAAIsW,EAAAA,YAAW,MAAA,GAItBL,EAAAH,GAAoBY,EAAAhV,aAIlBqK,EAAMyJ,GAA+B,aAAe2G,EACpDlP,EAAc,CAClBG,YAAa6O,GAA4B7O,YACzCG,cAAe0O,GAA4B1O,cAC3CE,aAAcwO,GAA4BxO,aAC1CE,YAAasO,GAA4BtO,aAEd,CAAA,EAAMpQ,KAAKiS,WAAWzC,OAAOhB,IAAkBkB,GAAa0C,oBAEzF,MAFM+J,EAAuBhD,EAAAhV,QAGf2X,OACZK,EAAYrC,UACZqC,EAAYxD,QACZwD,EAAY0C,IACZ1C,EAAYK,SAQZ,MAAM,IAAInN,MAAM,mDANhBwL,EAAQiB,MAAQK,EAAYL,MAC5BjB,EAAQf,SAAWqC,EAAYrC,SAC/Be,EAAQlC,OAASwD,EAAYxD,OAC7BkC,EAAQgE,GAAK1C,EAAY0C,GACzBhE,EAAQ2B,QAAUL,EAAYK,kBAxCnBkC,GAAA1O,cAAgB,IAChB0O,GAAAxO,aAAe,IACfwO,GAAAtO,YAAc,EACdsO,GAAA7O,YAAc,yBAP9BnP,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDATLgR,UACArC,2IAgBP,SAAAmP,GACUpI,EACArE,GADAjS,KAAAsW,YAAAA,EACAtW,KAAAiS,WAAAA,ECfZ,IAAa6M,GAAoB,IAAI3N,EAAAA,QAGrC4N,IA0BQA,GAAAjf,UAAAkf,WAAN,8FACEhf,KAAKkG,WAAW7F,IAAI,6BACpB4e,cAAcjf,KAAKkf,cACnBlf,KAAKkf,aAAeC,YAAW,WAC7B7V,EAAK8V,QACJpf,KAAKqf,sBAGIN,GAAAjf,UAAAsf,KAAd,2GAOE,OANApf,KAAKkG,WAAW7F,IAAI,uBACdif,EAActf,KAAKyb,YACnB8D,EAAevf,KAAK0b,aAI1B,CAAA,EAAM1b,KAAKwf,gBAAgB,iBAC3B,OADApU,EAAAjH,OACA,CAAA,EAAMnE,KAAKwf,gBAAgB,yBAA3BpU,EAAAjH,OAGEmb,IAAgBtf,KAAKyb,aACrB8D,IAAiBvf,KAAK0b,cAEtB1b,KAAKyf,mBAIDV,GAAAjf,UAAA2f,OAAR,WACEzf,KAAKkG,WAAW7F,IAAI,yBACpBye,GAAkBzb,KAAK,CAAEoY,YAAazb,KAAKyb,YAAaC,aAAc1b,KAAK0b,gBAG/DqD,GAAAjf,UAAA0f,gBAAd,SAA8BzF,qGACf,MAAA,CAAA,EAAM/Z,KAAKsW,YAAY3C,kBACpB,OADVL,EAAOlI,EAAAjH,OACG,CAAA,EAAMnE,KAAK0f,eAAexB,iBACxC5K,EAAKhB,sBADDuI,EAAUzP,EAAAjH,wBAIG,6BAAA,CAAA,EAAMnE,KAAK0f,eAAe9E,QACzCC,EACA,4BACA,MACA,KACA,KACAd,kBANI1H,EAAWjH,EAAAjH,UAQAuR,WAA+B,MAAlBrD,EAASgE,KACxB,UAAT0D,EACF/Z,KAAKyb,aAAc,EAEnBzb,KAAK0b,cAAe,GAGtB1b,KAAKkG,WAAW7F,IAAI,kCAAoCuY,KAAKC,UAAUxG,IAE1D,UAAT0H,EACF/Z,KAAKyb,aAAc,EAEnBzb,KAAK0b,cAAe,gCAIxB1b,KAAKkG,WAAW7F,IAAI,sCACP,UAAT0Z,EACF/Z,KAAKyb,aAAc,EAEnBzb,KAAK0b,cAAe,oDA3F3Bhb,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDARLgR,UACA+I,UACAlV,sJAqBP,SAAAsZ,GACUzI,EACAoJ,EACAxZ,GAFAlG,KAAAsW,YAAAA,EACAtW,KAAA0f,eAAAA,EACA1f,KAAAkG,WAAAA,EAZFlG,KAAAqf,YAAc,IACtBrf,KAAA2f,YAAc,IAAIC,EAAAA,gBAAwB,GAE1C5f,KAAA6f,iBAAkB,EAGV7f,KAAA0b,cAAe,EACf1b,KAAAyb,aAAc,EAQpBzb,KAAKkG,WAAW7F,IAAI,gCC3BX,SACA,SACC,UAII,OACK,QAIL,OACA,OAID,SACD,KAGhByf,GAAA,SAAAA,KACE9f,KAAA+f,WAAyBC,GACzBhgB,KAAAigB,SAAqBC,GACrBlgB,KAAAmgB,aAA6BC,GAC7BpgB,KAAAqgB,gBAAmCC,QAgBnCC,GAAAzgB,UAAA0gB,cAAA,SAAcC,EAAkBC,GAE9B,OADAtgB,QAAQC,IAAI,eAAgBogB,GACxBA,IAAST,IAEFS,IAAST,GACXhgB,KAAK2gB,WAAWD,GAFhB1gB,KAAK4gB,uBAAiC,IAAVF,IAavCH,GAAAzgB,UAAA+gB,YAAA,SAAYJ,EAAgBC,GAC1B,OAAID,IAASP,GACJlgB,KAAK2gB,WAAWD,EAAU,IACxBD,IAASP,GACXlgB,KAAK4gB,uBAAuBF,GAC1BD,IAASP,GACXlgB,KAAK2gB,WAAWD,EAAU,KAE1B1gB,KAAK2gB,WAAWD,EAAU,KASrCH,GAAAzgB,UAAAghB,YAAA,SAAYL,EAAuBC,GACjC,OAAID,IAASH,IAEFG,IAASH,GACXtgB,KAAK2gB,WAAsB,EAAVD,EAAe,EAAI,IAFpC1gB,KAAK2gB,WAAWD,IAa3BH,GAAAzgB,UAAAihB,gBAAA,SAAgBN,EAAoBC,GAClC,OAAID,IAASL,IAEFK,IAASL,GACXpgB,KAAK2gB,WAAWD,GAFhB1gB,KAAK2gB,WAAWD,EAAU,MAW/BH,GAAAzgB,UAAAkhB,YAAN,oFAUE,OATIC,EAAe,IAAInB,GAEE,QADnB3B,EAAwBne,KAAKyS,aAAapG,aAAarM,KAAKwa,gBAEhEyG,EAAE,GAEM,MAANA,IACF7gB,QAAQC,IAAI,kCACZ4gB,EAAK,IAAInB,IAEX,CAAA,EAAOmB,QAOHV,GAAAzgB,UAAAohB,YAAN,SAAkBC,2EAChBnhB,KAAKyS,aAAahG,aAAazM,KAAKwa,YAAW,YAGzC+F,GAAAzgB,UAAA6gB,WAAR,SAAmBxd,GACjB,OAAOA,EAAMie,QAAQ,IAGfb,GAAAzgB,UAAA8gB,uBAAR,SAA+Bzd,GAC7B,OAAOA,EAAMie,QAAQ,yBApGxB1gB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDA/BLqL,8HAoCP,SAAAsU,GAAoB9N,GAAAzS,KAAAyS,aAAAA,EAFZzS,KAAAwa,YAAc,gBCoDxB,IAAA6G,IAGQA,GAAAvhB,UAAAwhB,mBAAN,4EACE,MAAA,CAAA,EAAO,QAEXD,IANA,SAAAA,KAEErhB,KAAAuhB,cAA8B,GCtEhC,IAAaC,GAAkB,IAAIrQ,EAAAA,QACtBsQ,GAAiB,IAAItQ,EAAAA,QAGlCuQ,IAaEpgB,OAAAqgB,eAAID,GAAA5hB,UAAA,YAAS,KAAb,WACE,OAAOE,KAAK4hB,gBAEd,SAAcze,GACZnD,KAAK4hB,WAAaze,EAClBnD,KAAK6hB,0BAA0B1e,oCAgCjCue,GAAA5hB,UAAAgiB,oBAAA,SAAoBrG,EAAsBC,GACxC1b,KAAKkG,WAAW7F,IACd,uCAAyCob,EAAc,IAAMC,GAE/D1b,KAAK0b,aAAeA,EACpB1b,KAAKyb,YAAcA,GAQdiG,GAAA5hB,UAAAkf,WAAP,WAAA,IAAA1V,EAAAtJ,KACEA,KAAKkG,WAAW7F,IAAI,mDACpB4e,cAAcjf,KAAKkf,cACnBlf,KAAK+hB,qBAAqB/C,aAE1Bhf,KAAKof,MAAK,GACVpf,KAAKkG,WAAW7F,IAAI,8CACpBL,KAAKkf,aAAeC,YAAW,gFAE7Bnf,KAAKof,MAAK,YACTpf,KAAKqf,cASIqC,GAAA5hB,UAAAsf,KAAd,SAAmB4C,qGACjBhiB,KAAKkG,WAAW7F,IAAI,wCAEpBL,KAAKkG,WAAW7F,IAAI,yCAElB,+BAAKL,KAAKyb,aAAgBzb,KAAK0b,aAIlB,CAAA,EAAM1b,KAAKsW,YAAY3C,YAHlC3T,KAAKkG,WAAW7F,IAAI,4CACpB,CAAA,WAGS,OADLiT,EAAOkF,EAAArU,OACF,CAAA,EAAMnE,KAAK0f,eAAexB,iBACnC5K,EAAKhB,6BADIkG,EAAArU,OAIJ8d,kBAAoBvM,UAAvB,CAAA,EAAA,GACEsM,GACFhiB,KAAKkG,WAAW7F,IAAI,gCACF,CAAA,GAAlB+K,EAAApL,MAA6BkiB,gCAF3B,CAAA,EAAA,iBAEF9W,EAAKwW,WAAapJ,EAAArU,OAClBnE,KAAKyf,sBAKL,OAFAzf,KAAKkG,WAAW7F,IAAI,kCACpBL,KAAKkG,WAAW7F,IAAI,kBAAoB2hB,GACxC,CAAA,EAAMhiB,KAAKmiB,mBAAX3J,EAAArU,+BAMFnE,KAAKoiB,8BAELpiB,KAAKkG,WAAW7F,IACd,sIAIJL,KAAKkG,WAAW7F,IACd,0DACAsS,EAAEb,QACF,UACAa,EAAE0P,OAEJriB,KAAKsiB,gDAOKZ,GAAA5hB,UAAAqiB,SAAd,0GAEIniB,KAAKuiB,WACLviB,KAAKuiB,UAAUC,YAC8B,EAA7ClhB,OAAOqO,KAAK3P,KAAKuiB,UAAU7E,SAASnb,QAEpCvC,KAAKkG,WAAW7F,IAAI,gDACpB,CAAA,EAAML,KAAKyiB,cAAc,WALzB,CAAA,EAAA,iBAKArX,EAAAjH,oBAGA,OADAnE,KAAKkG,WAAW7F,IAAI,mDACpB,CAAA,EAAML,KAAKyiB,cAAc,oBAAzBrX,EAAAjH,wCAQUud,GAAA5hB,UAAA2iB,cAAd,SAA4B1I,iHAab,OAZb/Z,KAAKkG,WAAW7F,IAAI,2BAGlBmO,EADW,UAATuL,EACI,oCAAsC/Z,KAAKuiB,UAAUC,WAGrD,6BAIFE,EAAwB,CAAEF,WAAY,GAAI9E,QAAS,MACzD1d,KAAKkG,WAAW7F,IAAI,oCACP,CAAA,EAAML,KAAKsW,YAAY3C,kBACpB,OADVL,EAAOoF,EAAAvU,OACG,CAAA,EAAMnE,KAAK0f,eAAexB,iBACxC5K,EAAKhB,sBAEY,OAHbuI,EAAUnC,EAAAvU,OAGG,CAAA,EAAMnE,KAAK0f,eAAe9E,QAC3CC,EACArM,kBAFImU,EAAajK,EAAAvU,OAInBnE,KAAKkG,WAAW7F,IAAI,oDAAqDsiB,GAC5D,UAAT5I,EAAA,CAAA,EAAA,IAEF2I,EAAWF,WAAaG,EAAiB,KAAc,WAEvDvX,EAAAsX,EAAqB,CAAA,EAAM1iB,KAAK4iB,aAAaD,EAAiB,KAAW,kBACzE,GADAvX,EAAWsS,QAAUhF,EAAAvU,OACjBue,GAAcA,EAAWhF,QAAS,CAIpC,IAAWmF,KAFPnV,GAAS,EAEUgV,EAAWhF,QAEhC1d,KAAK4hB,WAAWlE,QAAQmF,GAAYH,EAAWhF,QAAQmF,GACvDnV,GAAS,EAEPA,IAEF1N,KAAK6hB,0BAA0B7hB,KAAK4hB,YACpC5hB,KAAKyf,6BAOY,OAFrBiD,EAAWF,WAAaG,EAAiB,KAAc,WAEvDnK,EAAAkK,EAAqB,CAAA,EAAM1iB,KAAK4iB,aAAaD,EAAiB,KAAW,iBAAzEnK,EAAWkF,QAAUhF,EAAAvU,OAErBnE,KAAKuiB,UAAYG,EACjB1iB,KAAKyf,0CAOKiC,GAAA5hB,UAAAgjB,qBAAd,SACEjI,oEAEA,MAAA,CAAA,EAAO,CAAE8C,OAAQ9C,EAAQoH,gBAAiBc,SAAU,SAOxCrB,GAAA5hB,UAAA8iB,aAAd,SACED,iHAEa,MAAA,CAAA,EAAM3iB,KAAKsW,YAAY3C,kBAClB,OADZL,EAAOkF,EAAArU,OACK,CAAA,EAAMnE,KAAK0f,eAAexB,iBAAiB5K,EAAKhB,sBACtC,OADtBnS,EAAYqY,EAAArU,OACU,CAAA,EAAMnE,KAAK8iB,qBAAqB3iB,WAAtD6iB,EAAsBxK,EAAArU,OACtBX,EAA0C,OAChD,IAAkByf,EAAAnZ,EAAA6Y,GAAUO,EAAAD,EAAA5f,QAAA6f,EAAAzf,KAAAyf,EAAAD,EAAA5f,SAAjB8f,EAAGD,EAAA/f,QAIVggB,EAAI3F,QACJ2F,EAAI3F,OAAOnQ,aAAe2V,EAAoBrF,OAAOtQ,YAIjC,mBAAX8V,EAAItE,MADbrb,EAAO2f,EAAQ,IAAKA,uGAKxB,MAAA,CAAA,EAAO3f,SAKKke,GAAA5hB,UAAAoiB,4BAAd,4EAGE,MAAA,CAAA,EAFqBliB,KAAKyS,aAAapG,aAAarM,KAAKwa,mBAQ7CkH,GAAA5hB,UAAA+hB,0BAAd,SAAwCsB,2EACtCnjB,KAAKyS,aAAahG,aAAazM,KAAKwa,YAAW,YAMzCkH,GAAA5hB,UAAA2f,OAAR,WACE+B,GAAgBne,KAAK,CAAE+f,MAAM,KAO/B1B,GAAA5hB,UAAAujB,gBAAA,SAAgBC,GACd,IAAK,IAAMzE,KAAM7e,KAAKuiB,UAAU7E,QAC9B,GAAI4F,EAAMC,KAAK1E,GACb,OAAO7e,KAAKuiB,UAAU7E,QAAQmB,IAO5B6C,GAAA5hB,UAAAwiB,eAAR,WACMtiB,KAAK2f,YAAY6D,WAAa,GAChCxjB,KAAK2f,YAAYtc,KAAKrD,KAAK2f,YAAY6D,WAAa,IAQhD9B,GAAA5hB,UAAAsiB,eAAR,WACoC,EAA9BpiB,KAAK2f,YAAY6D,YACnBxjB,KAAK2f,YAAYtc,KAAKrD,KAAK2f,YAAY6D,WAAa,IAQ3C9B,GAAA5hB,UAAA2jB,kBAAb,SAA+BC,yGAEhB,OADb1jB,KAAKkG,WAAW7F,IAAI,6BAA2BqjB,GAClC,CAAA,EAAM1jB,KAAKsW,YAAY3C,kBACf,OADfL,EAAOlI,EAAAjH,OACQ,CAAA,EAAMnE,KAAK0f,eAAexB,iBAAiB5K,EAAKhB,sBACzC,OADtBuI,EAAezP,EAAAjH,OACO,CAAA,EAAMnE,KAAK8iB,qBAAqBjI,WAS5D,OATMmI,EAAsB5X,EAAAjH,OACtBwf,EACJ,iBACAX,EAAoBrF,OACpB,IACAqF,EAAoBD,SAElBa,EAAa,GAETF,GACN,KAAK,EACHE,EAAaD,EAA4B,QACzC,MAEF,KAAK,EACHC,EAAaD,EAA4B,SACzC,MAEF,KAAK,EACHC,EAAaD,EAA4B,SACzC,MAEF,KAAK,EACHC,EAAaD,EAA4B,SAK7C,OADA3jB,KAAKkG,WAAW7F,IAAI,6BAA2BujB,GAC/C,CAAA,EAAM5jB,KAAK0f,eAAe9E,QACxBC,EACA,8BAAgC+I,EAAa,kCAF/CxY,EAAAjH,iBAWIud,GAAA5hB,UAAA+jB,eAAN,SAAqBC,kIAGN,OAFPC,EAAoBD,EAC1B9jB,KAAKkG,WAAW7F,IAAI,qCACP,CAAA,EAAML,KAAKsW,YAAY3C,kBACpB,OADVL,EAAOlI,EAAAjH,OACG,CAAA,EAAMnE,KAAK0f,eAAexB,iBACxC5K,EAAKhB,yBADDuI,EAAUzP,EAAAjH,QAGZnE,KAAKuiB,YAAaviB,KAAKuiB,UAAUC,WAAjC,MAAA,CAAA,EAAA,GAQF,GALIxiB,KAAK2d,OACP3d,KAAK2d,OAAO4D,cAAgB,GAE5BvhB,KAAK2d,OAAS,IAAI0D,GAGlBrhB,KAAKqjB,gBACH,IAAIW,OAAOnJ,EAAQoH,gBAAkB,cAAe,MACpDgC,QAAQC,SAOV,OAHAC,WAAU,WACR7a,EAAKua,eAAeE,IACnB,KACH,CAAA,oBAIiB,6BAAA,CAAA,EAAM/jB,KAAKokB,eAAepD,sBA+G3C,IA/GMG,EAAW/V,EAAAjH,OAIXkgB,EAAarkB,KAAKqjB,gBACtB,IAAIW,OAAOnJ,EAAQoH,gBAAkB,gBAAiB,MAGxDjiB,KAAKkG,WAAW7F,IACd,qEACAuY,KAAKC,UAAUwL,EAAWJ,QAAQK,QAGpCP,EAAQ,GAAGQ,UAAYF,EAAW7B,WAElCuB,EAAQ,GAAG5gB,MACT,GACAnD,KAAKokB,eAAe5D,cAClBW,EAASpB,WACTsE,EAAWJ,QAAQK,OAWjBE,EAAmBxkB,KAAKqjB,gBAC5B,IAAIW,OAAOnJ,EAAQoH,gBAAkB,iBAAkB,MAGzD8B,EAAQ,GAAGQ,UAAYC,EAAiBhC,WAExCuB,EAAQ,GAAG5gB,MACT,GACAnD,KAAKokB,eAAetD,YAClBK,EAASd,gBACTmE,EAAiBP,QAAQK,OAavBG,EAAYzkB,KAAKqjB,gBACrB,IAAIW,OAAOnJ,EAAQoH,gBAAkB,iBAAkB,MAGzD8B,EAAQ,GAAGQ,UAAYE,EAAUjC,WAEjCuB,EAAQ,GAAG5gB,MACT,GACAnD,KAAKokB,eAAevD,YAClBM,EAASlB,SACTwE,EAAUR,QAAQK,OAUhBI,EAAgB1kB,KAAKqjB,gBACzB,IAAIW,OAAOnJ,EAAQoH,gBAAkB,iBAAkB,MAEzDjiB,KAAKkG,WAAW7F,IACd,2DACAuY,KAAKC,UAAU6L,IAEjB1kB,KAAKkG,WAAW7F,IAAI,4BAA6BqkB,EAAclC,YAE/DuB,EAAQ,GAAGQ,UAAYG,EAAclC,WAErCuB,EAAQ,GAAG5gB,MACT,GACAnD,KAAKokB,eAAerD,gBAClBI,EAAShB,aACTuE,EAAcT,QAAQK,QAMpBK,EAAc3kB,KAAKqjB,gBACvB,IAAIW,OAAO,iBAAkB,SAG7BhkB,KAAKkG,WAAW7F,IAAI,6BAA8BskB,EAAYV,QAAQK,OACtEP,EAAQ,GAAGQ,UAAYI,EAAYnC,WACnCuB,EAAQ,GAAG5gB,MAAQwhB,EAAYV,QAAQK,OAEzCtkB,KAAKkG,WAAW7F,IAAI,4BAA6B0jB,GACjD/jB,KAAKyS,aAAahG,aAAa,UAAS,GACxCzM,KAAKkG,WAAW7F,IAAI,0BAA4BuY,KAAKC,UAAUkL,IAEzDa,EAAMpU,KAAKqU,OAAM,IAAInI,MAAOC,UAAY,KAAQ,IAChDmI,EAAYtU,KAAKqU,OAAM,IAAInI,MAAOC,UAAY,KAAQ,GAE5D3c,KAAKkG,WAAW7F,IAAI,4BAA0B0jB,GAErC3hB,EAAI,EAAGA,EAAI2hB,EAAQxhB,OAAQH,IAClCpC,KAAKkG,WAAW7F,IACd,6CACA0jB,EAAQ3hB,GAAGmiB,UACX,aACAK,GAEEb,EAAQ3hB,GAAGmiB,WAEXR,EAAQ3hB,GAAGmiB,UAAYK,GACvB5kB,KAAK+kB,aAAeD,IAEpB9kB,KAAKyjB,kBAAkBrhB,GACvBpC,KAAKkG,WAAW7F,IACd,4DACCukB,EAAMb,EAAQ3hB,GAAGmiB,kDAM1BvkB,KAAKkG,WAAW7F,IACd,iEAAmE+b,gBAKnEpc,KAAKglB,oBAAqB,IAAItI,MAAOC,YACjCsI,EAAejlB,KAAKqjB,gBACxB,IAAIW,OAAOnJ,EAAQoH,gBAAkB,cAAe,MAGtDjiB,KAAKklB,iBAAiB9B,KAAsC,OAA/B6B,EAAahB,QAAQK,MAClDtkB,KAAKyS,aAAahG,aAAa,mBAAqBzM,KAAqB,2CAG7EyhB,GAAepe,KAAK,CAAElD,KAAM4jB,mCAjgB/BrjB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,qDArBZme,UAEOnN,UACA+I,UAEA4F,UASA9a,SAVAwG,8LA2CP,SAAAyV,GACUK,EACAzL,EACAoJ,EACA0E,EACAle,EACAuM,GANV,IAAAnJ,EAAAtJ,KACUA,KAAA+hB,qBAAAA,EACA/hB,KAAAsW,YAAAA,EACAtW,KAAA0f,eAAAA,EACA1f,KAAAokB,eAAAA,EACApkB,KAAAkG,WAAAA,EACAlG,KAAAyS,aAAAA,EA7BVzS,KAAA+kB,aAAevU,KAAKqU,OAAM,IAAInI,MAAOC,UAAY,KAMzC3c,KAAAwa,YAAc,qBAWdxa,KAAA0b,cAAe,EACf1b,KAAAyb,aAAc,EACdzb,KAAAqf,YAAc,KACdrf,KAAAglB,kBAAoB,EAC5BhlB,KAAAklB,iBAAwB,CAAE9B,MAAM,GAChCpjB,KAAA2f,YAAc,IAAIC,EAAAA,gBAAwB,GASxC5f,KAAKkG,WAAW7F,IAAI,0BAChBL,KAAKyS,aAAapG,aAAa,sBACjCrM,KAAKklB,iBAAmBllB,KAAKyS,aAAapG,aAAa,qBAGzDyS,GAAkB5e,UAAS,SAAEC,GAC3BmJ,EAAKwY,oBAAoB3hB,EAAKsb,YAAatb,EAAKub","sourcesContent":["import { createAction, props } from '@ngrx/store';\n\nexport const onBoardingNextStep = createAction('[OnBoarding Step] Manage Next Step', props<{ payload: any }>());\nexport const onBoardingBackStep = createAction('[OnBoarding Step] Manage Back Step', props<{ payload: any }>());\n","\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store, select } from '@ngrx/store';\nimport { onBoardingNextStep } from './stores/onboarding-steps/action/onboarding-step.actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RehauFunctionalCoreService {\n\n  onBoardingData$: Observable<any[]>;\n  constructor(private store: Store<{ onBoardingData: any[] }>) {\n    this.onBoardingData$ = store.pipe(select('onBoardingData'));\n  }\n\n\n  showSuccess() {\n    this.onBoardingData$.subscribe((data) => {\n      console.log('this is list of onBoardings from App.component -->', data);\n    });\n    this.store.dispatch(onBoardingNextStep({ payload: { configPosition: 6 } }));\n  }\n}\n","import { ConfigService } from './config-service';\n\n\nexport function CONFIG_FACTORY(configService: ConfigService): any {\n  return () => configService.initConfig();\n}\n\nexport class ConfigServiceModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// IONIC - ANGULAR\nimport { Injectable, Inject } from '@angular/core';\nimport { DEBUG_LOG_ON, _DEV_ } from '../../config/app-setting.config';\n\n@Injectable()\n\nexport class LogService {\n  /**\n   * @description This Method is for general console logs\n   * @param content is the text you want to print as console\n   */\n  log(...content) {\n    if (!DEBUG_LOG_ON && !_DEV_) {\n      return;\n    }\n\n    console.log('✅ ', ...content);\n  }\n  /**\n   * @description This Method is for error console logs\n   * @param content is the text you want to print as console\n   */\n  log_e(...content) {\n    if (!DEBUG_LOG_ON && !_DEV_) {\n      return;\n    }\n\n    console.log('🚫❗️ ', ...content);\n  }\n\n  /**\n   * @description This Method is for warning console logs\n   * @param content is the text you want to print as console\n   */\n  log_w(...content) {\n    if (!DEBUG_LOG_ON && !_DEV_) {\n      return;\n    }\n\n    console.log('🔶 ', ...content);\n  }\n\n\n  /**\n   * @description This Method is for debugging console logs\n   * @param content is the text you want to print as console\n   */\n  log_d(...content) {\n    if (!DEBUG_LOG_ON && !_DEV_) {\n      return;\n    }\n\n    console.log('🔷 TODO: ', ...content);\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { AppConfig } from '../../models/app-config.model';\nimport { LogService } from '../logger-service/logger.service';\n\nexport class EnvData {\n  public env: any = 'development';\n}\n\nexport class BU {\n  public name: string;\n  public pass: string;\n}\n\nconst SERVICE_NAME = 'ConfigService';\n\n/**\n * @description Service for configuring global properties\n */\n@Injectable()\nexport class ConfigService {\n  protected conFig: any; // ConfigInterface\n  public enviRonment: EnvData;\n  protected actions: string[];\n\n  constructor(\n    @Inject('SERVICE_CONFIG') public configuration: AppConfig,\n    private logService: LogService\n  ) { }\n\n  public initConfig() {\n    this.conFig = this.configuration;\n    this.logService.log('Configuration data loaded1: ', this.conFig);\n  }\n\n}\n","import { TranslationService } from './translate-service';\n\n// Localisation\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\n// export function HttpLoaderFactory(http: HttpClient) {\n//   return new TranslateHttpLoader(http);\n\n// }\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\nexport function TRANSLATE_FACTORY(configService: TranslationService): any {\n  return () => configService.initTranslation();\n}\n@NgModule({\n  imports: [\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n  ],\n  exports: [\n    TranslateModule,\n  ]\n})\nexport class TranslateServiceModule {\n}\n","import { EventEmitter, Inject, Injectable } from '@angular/core';\nimport {\n  DefaultLangChangeEvent,\n  LangChangeEvent,\n  TranslateLoader,\n  TranslateService,\n  TranslationChangeEvent\n} from '@ngx-translate/core';\n\nimport { Observable, Subject, Subscriber } from 'rxjs';\nimport { LogService } from '../logger-service/logger.service';\nimport { isBoolean } from 'util';\n\n@Injectable()\nexport class TranslationService {\n  constructor(\n    private translateService: TranslateService, @Inject('SERVICE_CONFIG') public configuration: any,\n    private logService: LogService) { }\n\n  public initTranslation(): void {\n    this.logService.log('I am Init Translator', this.configuration);\n    if (this.configuration) {\n      this.logService.log('I am in config', this.configuration);\n      if (!!this.configuration.globalConfig.languages) {\n        this.addLangs(this.splitLanguages(this.configuration.globalConfig.languages));\n      }\n      if (!!this.configuration.globalConfig.defaultLanguage) {\n        this.setDefaultLang(this.configuration.globalConfig.defaultLanguage);\n      }\n      if (!!this.configuration.globalConfig.currentLanguage) {\n        this.logService.log('Hey Its TRUE I need to be called');\n        this.use(this.configuration.globalConfig.currentLanguage);\n      }\n    } else {\n      this.logService.log('No configuration provided. This service has not default values. Set them before use.');\n    }\n  }\n\n  private splitLanguages(langs: string): Array<string> {\n    let availableLanguages: Array<string> = langs.split('|');\n    return (availableLanguages = availableLanguages.filter(x => x.length > 0));\n  }\n\n  public currentLang(): string {\n    return this.translateService.currentLang;\n  }\n\n  public currentLoader(): TranslateLoader {\n    return this.translateService.currentLoader;\n  }\n\n  public onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.translateService.onLangChange;\n  }\n\n  public onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.translateService.onTranslationChange;\n  }\n\n  public onDefaultLangChange(): EventEmitter<DefaultLangChangeEvent> {\n    return this.translateService.onDefaultLangChange;\n  }\n  // #endregion\n\n  /**\n   * @description Sets the default language to use as a fallback\n   * @param lang language parameter needed\n   */\n  public setDefaultLang(lang: string): void {\n    this.translateService.setDefaultLang(lang);\n  }\n\n  /**\n   * @description Gets the default language\n   */\n  public getDefaultLang(): string {\n    return this.translateService.getDefaultLang();\n  }\n\n  /**\n   * @description Changes the lang currently used\n   * @param lang language parameter needed\n   */\n  public use(lang: string): Observable<any> {\n    this.logService.log('The Use Function is called  ---> ', lang);\n    return this.translateService.use(lang);\n  }\n\n  /**\n   * @description Gets an object of translations for a given language with the current loader\n   * @param lang language parameter needed\n   */\n  public getTranslation(lang: string): Observable<any> {\n    return this.translateService.getTranslation(lang);\n  }\n\n  /**\n   * @description Add new langs to the list\n   * @param langs language parameter needed\n   */\n  public addLangs(langs: Array<string>): void {\n    this.translateService.addLangs(langs);\n  }\n\n  /**\n   * @description Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.translateService.getLangs();\n  }\n  /**\n   * @description Calls resetLang and retrieves the translations object for the current loader\n   * @param lang language parameter needed\n   */\n  public reloadLang(lang: string): Observable<string | object> {\n    return this.translateService.reloadLang(lang);\n  }\n\n  /**\n   * @description Removes the current translations for this lang.\n   * @description You will have to call use, reloadLang or getTranslation again to be able to get translations\n   * @param lang language parameter needed\n   */\n  public resetLang(lang: string): void {\n    this.translateService.resetLang(lang);\n  }\n\n  /**\n   * @description Returns the current browser lang if available, or undefined otherwise\n   */\n  public getBrowserLang(): string | undefined {\n    return this.translateService.getBrowserLang();\n  }\n\n  /**\n   * @description Returns the current browser culture language name (e.g. 'de-DE' if available, or undefined otherwise\n   */\n  public getBrowserCultureLang(): string | undefined {\n    return this.getBrowserCultureLang();\n  }\n\n  /**\n   * @description Gets the translated value of a key (or an array of keys) or the key if the value was not found\n   * @param key key of the json value\n   * @param interpolateParams Object Optional\n   */\n  public get(key: string | Array<string>, interpolateParams?: object): Observable<string | object> {\n    return this.translateService.get(key, interpolateParams);\n  }\n  /**\n   * @description Gets the instant translated value of a key (or an array of keys). /!\\ This method is synchronous and the\n   * default file loader is asynchronous.\n   * @description You are responsible for knowing when your translations have been loaded and it is safe to use this method.\n   * @description If you are not sure then you should use the get method instead\n   * @param key Key for the service\n   */\n  public instant(key: string): Observable<any> {\n    return new Observable(subscriber => {\n      console.log('Hello **********************');\n      subscriber.next(this.translateService.instant(key));\n    });\n  }\n  /**\n   * @description Gets the instant translated value of a key (or an array of keys). /!\\ This method is synchronous and the\n   * default file loader is asynchronous.\n   * @description You are responsible for knowing when your translations have been loaded and it is safe to use this method.\n   * @description If you are not sure then you should use the get method instead\n   * @param key Key for the service\n   */\n  public instantObject(item: object): Observable<any> {\n    if (Array.isArray(item)) {\n      const temp = [];\n      for (const element of item) {\n        temp.push(this.mainInstant(element));\n      }\n      return new Observable(subscriber => {\n        console.log('Hello ######################');\n        subscriber.next(temp);\n      });\n    } else {\n      return new Observable(subscriber => {\n        console.log('Hello $$$$$$$$$$$$$$$$$$$$$$');\n        subscriber.next(this.mainInstant(item));\n      });\n    }\n  }\n\n  /**\n   * @description Gets the instant value of each key in the object\n   * @param object which need to be translated\n   */\n  public mainInstant(item: object): object {\n    const temp = {};\n    for (const key in item) {\n      if (item.hasOwnProperty(key)) {\n        const keyVal = item[key];\n        if (typeof keyVal === 'string' && keyVal.length > 0) {\n          const val = this.translateService.instant(keyVal);\n          temp[key] = val;\n        } else {\n          temp[key] = keyVal;\n        }\n      }\n    }\n    return temp;\n  }\n}\n","import { NgModule, ModuleWithProviders, APP_INITIALIZER, forwardRef, Optional, SkipSelf } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CONFIG_FACTORY } from './services/config-service/config-service.module';\nimport { ConfigService } from './services/config-service/config-service';\nimport { AppConfig } from './models/app-config.model';\nimport { TRANSLATE_FACTORY, TranslateServiceModule } from './services/translate-service/translate-service.module';\nimport { TranslationService } from './services/translate-service/translate-service';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [\n    TranslateServiceModule\n  ]\n})\nexport class RehauFunctionalCoreModule {\n  public static forRoot(SERVICE_CONFIG: AppConfig): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RehauFunctionalCoreModule,\n      providers: [\n        { provide: 'SERVICE_CONFIG', useValue: SERVICE_CONFIG },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: CONFIG_FACTORY,\n          deps: [forwardRef(() => ConfigService)],\n          multi: true\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: TRANSLATE_FACTORY,\n          deps: [forwardRef(() => TranslationService)],\n          multi: true\n        },\n        ConfigService,\n      ]\n    };\n  }\n\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { onBoardingBackStep, onBoardingNextStep } from '../action/onboarding-step.actions';\n\nexport const initialState = {\n  configPosition: 0\n};\nconst Reducer = createReducer(\n  initialState,\n  on(onBoardingNextStep, (state, { payload }) =>\n    ({ configPosition: payload.configPosition + 1 })),\n  on(onBoardingBackStep, (state, { payload }) =>\n    ({ configPosition: payload.configPosition - 1 }))\n);\n\nexport function onBoardingReducer(state: any | undefined, action: Action) {\n  return Reducer(state, action);\n}\n","import { createAction, props } from '@ngrx/store';\nimport { CidaasState } from '../../../models/auth.model';\n\nexport const userInfoAction = createAction('User info from CIDAAS', props<{ payload: CidaasState }>());\n\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { userInfoAction } from '../action/auth.action';\nimport { CidaasState } from '../../../models/auth.model';\n\nexport const initialState: CidaasState = {\n  userInfo: {}\n};\nconst Reducer = createReducer(\n  initialState,\n  on(userInfoAction, (state, { payload }) =>\n    ({ userInfo: { ...payload.userInfo } }))\n);\n\nexport function cidaasReducer(state: CidaasState | undefined, action: Action) {\n  return Reducer(state, action);\n}\n","import { createAction, props } from '@ngrx/store';\n\nexport const loaderAction = createAction('Show-Hide laoder', props<{ payload: boolean }>());\n\n\n\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { loaderAction } from '../action/loader.action';\n\nexport interface State {\n  showLoader: boolean;\n}\n\nexport const initialState: State = {\n    showLoader: false,\n  };\n\nconst Reducer = createReducer(\n  initialState,\n  on(loaderAction, state => ({ ...state })),\n);\n\nexport function loaderReducer(state: State | undefined, action: Action) {\n    return Reducer(state, action);\n}\n","import { ActionReducerMap } from '@ngrx/store';\n\nimport { onBoardingReducer } from './onboarding-steps/reducer/onboarding-step.reducer';\nimport { cidaasReducer } from './auth/reducer/auth.reducer';\nimport { loaderReducer } from './loader/reducer/loader.reducer';\n\nexport interface IAppState {\n  onBoardingData: any;\n  cidaasData: any;\n  loaderState: any;\n}\n\nexport const reducers: ActionReducerMap<IAppState> = {\n  onBoardingData: onBoardingReducer,\n  cidaasData: cidaasReducer,\n  loaderState: loaderReducer\n};\n","// IONIC - ANGULAR\nimport { Inject, Injectable } from '@angular/core';\nimport SimpleCrypto from 'simple-crypto-js';\n\n\n@Injectable()\nexport class CacheService {\n  constructor( @Inject('SERVICE_CONFIG') public configuration: any ) {\n  }\n  simpleCrypto = new SimpleCrypto(this.configuration.globalConfig.SECRET_KEY);\n\n  /**\n   * @description This Method is required for Removing particular data from local storage.\n   * @param key  is required for the removing particular data\n   */\n  removeLocalData(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  /**\n   * @description This Method is required for getting Local storage Data.\n   * @param Key This is required for the geting particular data with crypted formated.\n   */\n  getLocalData(key: string) {\n    // Set the second paramter to true, then it will return object instead of string\n    if (localStorage.getItem(key)) {\n      return this.simpleCrypto.decrypt(localStorage.getItem(key), true);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @description This Method is for setting Key, Value pair in the Local storage.\n   * @param key is used for the storeing data.\n   * @param value is the Actual value which need to be encrypted befor store.\n   */\n  setLocalData(key: string, value: any) {\n    const encrypted = this.simpleCrypto.encrypt(value);\n    localStorage.setItem(key, encrypted);\n  }\n}\n","import { OAuthProvider } from 'ionic-cordova-oauth/dist/provider';\nimport { IcidaasProviderOptions } from '../models/cidaas.model';\nimport shajs from 'sha.js';\n\n\n// @dynamic\nexport class CidaasProvider extends OAuthProvider {\n  static CLIENT_ID = '9feab210-c025-406d-a10c-3d8323214491';\n  static baseURL = 'https://accounts.rehau.com';\n  static tokenEndpoint = CidaasProvider.baseURL + '/token-srv/token';\n  revokeUrl = CidaasProvider.baseURL + '/authz-srv/revoke';\n\n\n  options: IcidaasProviderOptions;\n  protected authUrl = CidaasProvider.baseURL + '/authz-srv/authz';\n  protected defaults: object = {\n    responseType: 'code'\n  };\n  static base64URLEncode(str): string {\n    return str.toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=/g, '');\n  }\n  constructor(options: IcidaasProviderOptions = {}) {\n    super(options);\n\n    if (!options.appScope || options.appScope.length <= 0) {\n      throw new Error(`A ${this.name} app scope must exist`);\n    }\n  }\n\n  sha256(buffer) {\n    return shajs('sha256').update(buffer).digest();\n  }\n\n  private removeParam(key, sourceURL) {\n    let rtn = sourceURL.split('?')[0];\n    let param = '';\n    let paramsArr = [];\n    const queryString = (sourceURL.indexOf('?') !== -1) ? sourceURL.split('?')[1] : '';\n    if (queryString !== '') {\n      paramsArr = queryString.split('&');\n      for (let i = paramsArr.length - 1; i >= 0; i -= 1) {\n        param = paramsArr[i].split('=')[0];\n        if (param === key) {\n          paramsArr.splice(i, 1);\n        }\n      }\n      rtn = rtn + '?' + paramsArr.join('&');\n    }\n    return rtn;\n  }\n\n  private addParam(key, sourceURL) {\n    sourceURL += `&scope=`;\n    sourceURL += `${this.options.appScope.join(' ')}`;\n    return sourceURL;\n  }\n\n  protected optionsToDialogUrl(options) {\n    let url = super.optionsToDialogUrl(options);\n    url = this.removeParam('scope', url);\n    url = this.addParam('scope', url);\n    if (options.authType) {\n      url += `&auth_type=${options.authType}`;\n    }\n    if (options.nonce) {\n      url += `&nonce=${options.nonce}`;\n    }\n    if (options.code_challenge_method === 'plain') {\n      url += `&code_challenge=${options.code_challenge}&code_challenge_method=${options.code_challenge_method}`;\n    }\n    if (options.code_challenge_method === 'S256') {\n      url += `&code_challenge=${\n        CidaasProvider.base64URLEncode(this.sha256(options.code_challenge))\n        }&code_challenge_method=${options.code_challenge_method}`;\n    }\n    if (options.viewType) {\n      url += `&view_type=${options.viewType}`;\n    }\n    console.log('Calling URL: ' + url);\n    return url;\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { retryBackoff } from 'backoff-rxjs';\nimport { timeout } from 'rxjs/operators';\nimport { LogService } from '../logger-service/logger.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebService {\n\n  constructor(\n    private http: HttpClient,\n    private logService: LogService,\n    @Inject('SERVICE_CONFIG') public configuration: any,\n  ) { }\n\n  BASE_URL = this.configuration.globalConfig.BASE_URL;\n  // getApi(), postApi() are responsible for Main Api cals depending on the Http methods\n\n  // /**\n  //  * @description This method is for Get Api Calls\n  //  * @param endPoint String Just need to pass the Endpoint\n  //  * @returns This function returns the respective response from the Api\n  //  */\n  // getApi(endPoint, retryConfig: any = {}): Observable<any> {\n  //   if (Object.keys(retryConfig).length !== 0) {\n  //     return this.http.get(this.BASE_URL + endPoint).pipe(\n  //       timeout(retryConfig.REQ_TIMEOUT),\n  //       retryBackoff({\n  //         initialInterval: retryConfig.INIT_INTERVAL,\n  //         maxInterval: retryConfig.MAX_INTERVAL,\n  //         maxRetries: retryConfig.MAX_RETRIES,\n  //         shouldRetry: error => {\n  //           this.logService.log_w('Aborted remote request');\n  //           return true;\n  //         },\n  //         backoffDelay: (iteration, initialInterval) =>\n  //           Math.pow(1.5, iteration) * initialInterval\n  //       })\n  //     );\n  //   } else {\n  //     return this.http.get(this.BASE_URL + endPoint);\n  //   }\n  // }\n\n  /**\n   * @description This method is for Post Api calls\n   * @param endPoint String Api Endpoint need to pass\n   * @param data Object required for the Post request\n   * @returns Return the respective responce from the Apis.\n   */\n  // postApi(endPoint, data, retryConfig: any = {}): Observable<any> {\n  //   if (Object.keys(retryConfig).length !== 0) {\n  //     return this.http.post(this.BASE_URL + endPoint, data).pipe(\n  //       timeout(retryConfig.REQ_TIMEOUT),\n  //       retryBackoff({\n  //         initialInterval: retryConfig.INIT_INTERVAL,\n  //         maxInterval: retryConfig.MAX_INTERVAL,\n  //         maxRetries: retryConfig.MAX_RETRIES,\n  //         shouldRetry: error => {\n  //           this.logService.log_w('Aborted remote request');\n  //           return true;\n  //         },\n  //         backoffDelay: (iteration, initialInterval) =>\n  //           Math.pow(1.5, iteration) * initialInterval\n  //       })\n  //     );\n  //   } else {\n  //     return this.http.post(this.BASE_URL + endPoint, data);\n  //   }\n  // }\n\n  /**\n   * @description This method is for Get Api Calls\n   * @param url String url for the API\n   * @param httpOptions header part is optional\n   * @param retryConfig is the object if want to hit API multiple time after failure\n   * @returns This function returns the respective response from the Api\n   */\n  getApi(url, httpOptions: any = {}, retryConfig: any = {}): Observable<any> {\n    if (Object.keys(retryConfig).length !== 0) {\n      return this.http.get(url, httpOptions).pipe(\n        timeout(retryConfig.REQ_TIMEOUT),\n        retryBackoff({\n          initialInterval: retryConfig.INIT_INTERVAL,\n          maxInterval: retryConfig.MAX_INTERVAL,\n          maxRetries: retryConfig.MAX_RETRIES,\n          shouldRetry: error => {\n            this.logService.log_w('Aborted remote request');\n            return true;\n          },\n          backoffDelay: (iteration, initialInterval) =>\n            Math.pow(1.5, iteration) * initialInterval\n        })\n      );\n    } else {\n      return this.http.get(url, httpOptions);\n    }\n  }\n\n  /**\n   * This method is for Post Api calls\n   * @param url String Api URL\n   * @param requestBody Object required for the Post request\n   * @param httpOptions header part is optional\n   * @param retryConfig is the object if want to hit API multiple time after failure\n   * @returns Return the respective responce from the Apis.\n   */\n  postApi(url, requestBody, httpOptions: any = {}, retryConfig: any = {}): Observable<any> {\n    console.log(url, 'url');\n    console.log(requestBody, 'requestBody');\n    console.log(httpOptions, 'httpOptions');\n    if (Object.keys(retryConfig).length !== 0) {\n      return this.http.post(\n        url,\n        requestBody,\n        httpOptions\n      ).pipe(\n        timeout(retryConfig.REQ_TIMEOUT),\n        retryBackoff({\n          initialInterval: retryConfig.INIT_INTERVAL,\n          maxInterval: retryConfig.MAX_INTERVAL,\n          maxRetries: retryConfig.MAX_RETRIES,\n          shouldRetry: error => {\n            console.log('Aborted remote request');\n            return true;\n          },\n          backoffDelay: (iteration, initialInterval) =>\n            Math.pow(1.5, iteration) * initialInterval\n        })\n      );\n    } else {\n      return this.http.post(url, requestBody, httpOptions);\n    }\n  }\n\n  /**\n   * This method is for Request Api calls\n   * @param method String method need to pass in request API\n   * @param url String API URL\n   * @param httpOptions header details is optional\n   * @param retryConfig is the object if want to hit API multiple time after failure. it is optional\n   * @returns Return the respective responce from the Apis.\n   */\n  requestApi(method, url, httpOptions, retryConfig: any = {}): Observable<any> {\n    if (Object.keys(retryConfig).length !== 0) {\n      return this.http.request(method, url, httpOptions).pipe(\n        timeout(retryConfig.REQ_TIMEOUT),\n        retryBackoff({\n          initialInterval: retryConfig.INIT_INTERVAL,\n          maxInterval: retryConfig.MAX_INTERVAL,\n          maxRetries: retryConfig.MAX_RETRIES,\n          shouldRetry: error => {\n            // this.logService.log_w('Aborted remote request');\n            console.log('Aborted remote request');\n            return true;\n          },\n          backoffDelay: (iteration, initialInterval) =>\n            Math.pow(1.5, iteration) * initialInterval\n        })\n      );\n    } else {\n      return this.http.post(method, url, httpOptions);\n      // return this.postApi(url, {}, httpOptions);\n    }\n  }\n\n}\n","export const userData = 'USERDATA';\n","// IONIC - ANGULAR\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Store, select } from '@ngrx/store';\nimport { userInfoAction } from '../../stores/auth/action/auth.action';\nimport { CidaasState } from '../../models/auth.model';\nimport { LogService } from '../logger-service/logger.service';\nimport { loaderAction } from '../../stores/loader/action/loader.action';\n\n\nexport const LoaderFlag = new Subject();\n@Injectable()\n\nexport class StoreService {\n  userData$: Observable<CidaasState>;\n  showLoader$: Observable<boolean>;\n  constructor(\n    private store: Store<{ cidaasData: CidaasState, loaderState: boolean }>,\n    private logService: LogService\n  ) {\n    this.userData$ = this.store.pipe(select('cidaasData'));\n    this.showLoader$ = store.pipe(select('loaderState'));\n  }\n\n  dispatchUserData(Data) {\n    this.store.dispatch(userInfoAction({ payload: { userInfo: Data } }));\n  }\n\n  /**\n   * @description This function will return the latest state of userData from store\n   * @returns object of user data\n   */\n  async getUserData() {\n    let userData;\n    this.userData$.subscribe((data) => {\n      if (Object.keys(data.userInfo).length > 0) {\n        userData = data.userInfo;\n      }\n    });\n\n    return userData;\n  }\n\n  /**\n   * @description This function will update the state of loader\n   * @param state is the value of state to dispatch\n   */\n  dispatchLoaderState(state) {\n    this.logService.log('in dispatch method tab loader state', state);\n    this.store.dispatch(loaderAction(state));\n    LoaderFlag.next(state);\n  }\n\n  /**\n   * @description This function will return the latest state of loader\n   * @returns current loader state\n   */\n  async getLoaderState() {\n    let loaderState;\n    this.showLoader$.subscribe((state) => {\n        loaderState = state;\n    });\n    this.logService.log('in get loader state --->', loaderState);\n    LoaderFlag.next(loaderState.showLoader);\n    return loaderState.showLoader;\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ITokenEndpointBody, ITokenEndpointResponse } from '../../models/cidaas.model';\nimport { CidaasProvider } from '../../providers/cidaas.provider';\nimport { WebService } from '../web-service/web.service';\nimport { CacheService } from '../cache-service/cache.service';\nimport { userData } from '../../config/local-storage.config';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LogService } from '../logger-service/logger.service';\nimport { StoreService } from '../store-service/store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private tokenPromise: Promise<boolean>;\n\n  constructor(\n    private webService: WebService,\n    private cacheService: CacheService,\n    private logservice: LogService,\n    private storeService: StoreService,\n    @Inject('SERVICE_CONFIG') public configuration: any\n  ) { }\n\n  async oAuthCallback(body: ITokenEndpointBody, message: string): Promise<void> {\n    const response: any = await this.getToken(body, message);\n    return response;\n  }\n\n  /**\n   * @description This function is responsible to call postAPI method to get the new token\n   * @returns object of ITokenEndpointResponse\n   */\n  async tokenRequest(body: ITokenEndpointBody): Promise<ITokenEndpointResponse> {\n    return this.webService.postApi(this.configuration.cidaasConfig.ciddasTokenEndpoint, body).toPromise();\n\n  }\n\n  /**\n   * @description This function will call the token request method to get new token\n   * @description And will store the user data in store and local storage\n   * @returns object of user data\n   */\n  private async getToken(body, message): Promise<any> {\n    try {\n      const response: ITokenEndpointResponse = await this.tokenRequest(body);\n      if (!response.access_token || !response.refresh_token) {\n        // Here We clean the User Object from Local Storage and Store.\n        this.storeService.dispatchUserData({});\n        this.cacheService.removeLocalData(userData);\n        return response;\n      } else {\n        body.access_token = response.access_token;\n        body.refresh_token = response.refresh_token;\n        // Here We Set the User Object in Local Storage and Store.\n        this.storeService.dispatchUserData(body);\n        this.cacheService.setLocalData(userData, body);\n        return body;\n      }\n\n    } catch (e) {\n      if (e.error instanceof ErrorEvent) {\n        this.logservice.log_e('An error occurred for getting ' + message + ':', e.error.message);\n        this.logservice.log('Never the less leave the use do its thing without tokens');\n        body.status = e.status;\n        body.message = e.error.message;\n        return body;\n      } else if (e.status === 0) {\n        this.logservice.log_e('An error occurred for getting ' + message + ':', e.error.message);\n        this.logservice.log('Never the less leave the use do its thing without tokens');\n        body.status = e.status;\n        body.message = e.error.message;\n        return body;\n      } else if (e.status === 408) {\n        this.logservice.log_e(\n          'An error occurred for getting ' + message + ':',\n          e.error.message\n        );\n        this.logservice.log('Never the less leave the use do its thing without tokens');\n        body.status = e.status;\n        body.message = e.error.message;\n        return body;\n      } else {\n        this.logservice.log_e(\n          `Backend returned code for getting ${message} ${e.status}, ` +\n          `body was for getting ${message} : ${e.error}`\n        );\n        this.storeService.dispatchUserData({});\n        this.cacheService.removeLocalData(userData);\n        // await this.logoutService.doLogout();\n        return body;\n      }\n    }\n  }\n\n  // tslint:disable-next-line:jsdoc-format\n  /**\n   * @description This function will check whether user is new or existing.\n   * @description If user is existing then this function will get the current or refreshed token\n   * @returns boolean value based on expired\n   */\n  async isLoggedIn(): Promise<boolean> {\n    const currentUserFromStore = await this.storeService.getUserData();\n    const currentUser: any = this.cacheService.getLocalData(userData);\n    this.logservice.log('User data from local storage = ', currentUser);\n    this.logservice.log('User data from store = ', currentUserFromStore);\n\n    if (currentUserFromStore && currentUser) {\n      const res = await this.checkTokenStatus(currentUser);\n      return res;\n    } else if (currentUserFromStore && !currentUser) {  // if data is present in store but not in local stoarge\n      this.cacheService.setLocalData(userData, currentUserFromStore); // update locsal storage\n      const res = await this.checkTokenStatus(currentUserFromStore);\n      return res;\n    } else if (!currentUserFromStore && currentUser) { // if data is present in local storage but not in Store\n      this.storeService.dispatchUserData(currentUser); // update store\n      const res = await this.checkTokenStatus(currentUser);\n      return res;\n    } else {\n      return false;\n    }\n  }\n\n  // tslint:disable-next-line:jsdoc-format\n  /**\n   * @description This function will check the status of token whether it is expired or not\n   * @description If token is expired then it will call refresh token method\n   * @param currentUser is the currentuser object either from store or local storage\n   * @returns boolean value or refresh token object based on condition\n   */\n  async checkTokenStatus(currentUser): Promise<boolean> {\n    const isExpired = this.isTokenExpire(currentUser.access_token);\n    if (isExpired) {\n      this.logservice.log_w('THIS ACCESS_TOKEN IS EXPIRED in Login, try getting new one.');\n      const res = await this.refreshTokenWrapper(currentUser);\n      return res;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @description This function is required for checking the access_token is expired or not.\n   * @param access_token Need Access_token for checking is it expired\n   * @returns boolean value based on expied\n   */\n  // tslint:disable-next-line:variable-name\n  isTokenExpire(access_token: string): boolean {\n    const helper = new JwtHelperService();\n    return helper.isTokenExpired(access_token);\n  }\n\n  /**\n   * @description This method will get call whenevr we need to refresh the expise token\n   * @param user is the object conatining all CIDAAS login data\n   * @returns object of CIDAAS login data including regresh token\n   */\n  private async refreshTokenWrapper(user): Promise<boolean> {\n    const body: ITokenEndpointBody = {\n      client_id: this.configuration.cidaasConfig.cidaasClientId,\n      grant_type: 'refresh_token',\n      refresh_token: user.refresh_token\n    };\n\n    const result = await this.getToken(body, 'refresh token');\n    return result;\n  }\n\n  /**\n   * @description This method will decide the access token\n   * @returns decoded access token\n   */\n  async getCorrelationId() {\n    const user = await this.getUser();\n    const helper = new JwtHelperService();\n    const decodedToken = helper.decodeToken(user.access_token);\n    return decodedToken.sub;\n  }\n\n  /**\n   * @description This method is to get the userData related to CIDAAS login\n   * @returns object of CIDAAS login data\n   */\n  async getUser() {\n    let user: any = this.cacheService.getLocalData(userData);\n    const helper = new JwtHelperService();\n    if (user) {\n      const isExpired = this.isTokenExpire(user.access_token);\n      if (isExpired) {\n        this.logservice.log(\n          'THIS ACCESS_TOKEN IS EXPIRED in getUser, try getting new one.'\n        );\n        user = await this.refreshTokenWrapper(user);\n        this.logservice.log('refreshTest::got result in getUser ' + user);\n      }\n    }\n    return user;\n  }\n\n}\n","export const cidaasLoginProvider = {\n  appScope: ['email', 'roles', 'profile', 'offline_access'],\n  responseType: 'code',\n  redirectUri: 'http://localhost:8000/callback',\n  code_challenge: '9235487394587-xcode',\n  code_challenge_method: 'S256',\n  nonce: '12345678909876'\n};\nexport const cidaasRegisterProvider = {\n  appScope: ['email', 'roles', 'profile', 'offline_access'],\n  responseType: 'code',\n  redirectUri: 'http://localhost:8000/register',\n  code_challenge: '9235487394587-xcode',\n  code_challenge_method: 'S256',\n  nonce: '1234543267890',\n  viewType: 'register'\n};\n\nexport const bodyParam = { grant_type: 'authorization_code' };\n\nexport const loginDesign = {\n  closebuttoncolor: '#dd0060',\n  hardwareback: 'no',\n  hidenavigationbuttons: 'no',\n  hideurlbar: 'yes',\n  navigationbuttoncolor: '#dd0060',\n  toolbarcolor: '#f7f7f7'\n};\n\nexport const registerDesign = {\n  closebuttoncolor: '#dd0060',\n  hardwareback: 'no',\n  hidenavigationbuttons: 'no',\n  hideurlbar: 'yes',\n  navigationbuttoncolor: '#dd0060',\n  toolbarcolor: '#f7f7f7'\n};\nexport const userObject = {\n  message: '',\n  status: '',\n  accessToken: '',\n  refreshToken: ''\n};\n\n","// IONIC - ANGULAR\nimport { Inject, Injectable } from '@angular/core';\n\n// Importing CIDAAS Provider\nimport { CidaasProvider } from '../../providers/cidaas.provider';\nimport { ITokenEndpointBody } from '../../models/cidaas.model';\nimport { Oauth, OauthBrowser, OauthCordova } from 'ionic-cordova-oauth';\nimport { AuthService } from '../auth-service/auth.service';\nimport { LogService } from '../logger-service/logger.service';\nimport { StoreService } from '../store-service/store.service';\nimport { CacheService } from '../cache-service/cache.service';\nimport { userData } from '../../config/local-storage.config';\n\n// CIDAAS Confi Data\nimport { loginDesign, bodyParam, registerDesign, userObject } from '../../config/cidaas.config';\nimport { throwError } from 'rxjs';\nimport { ConfigService } from '../config-service/config-service';\n\n\n@Injectable()\nexport class LoginService {\n  constructor(\n    private authService: AuthService,\n    private logService: LogService,\n    private configService: ConfigService,\n    private storeService: StoreService,\n    private cacheService: CacheService,\n    @Inject('SERVICE_CONFIG') public configuration: any\n  ) { }\n  oauth: Oauth;\n  // cidaasParam = { clientId: CidaasProvider.CLIENT_ID };\n  cidaasParam = { clientId: this.configuration.cidaasConfig.cidaasClientId };\n  cidaasRegisterProvider = this.configuration.cidaasConfig.cidaasRegisterProvider;\n  cidaasLoginProvider = this.configuration.cidaasConfig.cidaasLoginProvider;\n  cidaasLoginDesign = this.configuration.cidaasConfig.cidaasLoginDesign;\n  cidaasRegisterDesign = this.configuration.cidaasConfig.cidaasRegisterDesign;\n\n  /**\n   * @description This is CIDAAS Authentication main function\n   * @param actionType is the string which indicates the type of action whether it is login or register\n   * @param platform is used to define the platform to use. Default value is browser\n   */\n  async cidaasAuth(actionType, platform = 'browser') {\n    actionType = actionType.trim();\n    let provider;\n    if (actionType === 'register token') {\n      // provider = new CidaasProvider({ ...this.cidaasParam, ...cidaasRegisterProvider });\n      provider = new CidaasProvider({ ...this.cidaasParam, ...this.cidaasRegisterProvider });\n    } else if (actionType === 'login token') {\n      // provider = new CidaasProvider({ ...this.cidaasParam, ...cidaasLoginProvider });\n      provider = new CidaasProvider({ ...this.cidaasParam, ...this.cidaasLoginProvider });\n    }\n    const pkceBody: ITokenEndpointBody = {\n      grant_type: bodyParam.grant_type,\n      client_id: provider.options.clientId,\n      redirect_uri: provider.options.redirectUri,\n      code_verifier: CidaasProvider.base64URLEncode(\n        provider.options.code_challenge\n      )\n    };\n    this.logService.log('TEST CONFI SERVICE = ', + this.configService.configuration);\n    this.logService.log('pkceBody required for login = ' + pkceBody);\n    this.logService.log('provider body required for login =' + provider);\n    let result;\n    const res = userObject;\n    try {\n      result = await this.login(provider, pkceBody, actionType, platform);\n      if (result.access_token === '' || result.access_token === undefined) {\n        this.logService.log_e('login failed == ');\n        this.logService.log_e(result);\n        res.message = 'login Failed';\n        res.status = '1';\n        return res;\n      } else {\n        this.logService.log('login successFull == ');\n        this.logService.log(result);\n        res.message = 'login success';\n        res.status = '0';\n        res.accessToken = result.access_token;\n        res.refreshToken = result.refresh_token;\n        return res;\n      }\n    } catch (err) {\n      throwError(err);\n    }\n  }\n\n  /**\n   * @description This is logout function\n   * @description it will remove userData from local storage and store\n   */\n  async cidaasLogout() {\n    try {\n      this.storeService.dispatchUserData({});\n      this.cacheService.removeLocalData(userData);\n      return true;\n    } catch (err) {\n      throwError(err);\n    }\n  }\n\n  /**\n   * @description This is Login function to call oauth loginVia API\n   * @param provider is the CIDAAS provider object\n   * @param pkceBody is the ITokenEndpointBody object\n   * @param actionType it is identifier for the API action whether it is for login/register\n   */\n  async login(provider, pkceBody, actionType, platform) {\n    let res: any;\n    if (platform === 'browser') {\n      this.oauth = new OauthBrowser();\n    } else {\n      this.oauth = new OauthCordova();\n    }\n    if (this.cidaasLoginDesign === undefined || Object.keys(this.cidaasLoginDesign).length === 0) {\n      this.cidaasLoginDesign = loginDesign;\n    }\n    if (this.cidaasRegisterDesign === undefined || Object.keys(this.cidaasRegisterDesign).length === 0) {\n      this.cidaasRegisterDesign = registerDesign;\n    }\n    if (actionType === 'register token') {\n      res = await this.oauth.logInVia(provider, this.cidaasLoginDesign);\n    } else if (actionType === 'login token') {\n      res = await this.oauth.logInVia(provider, this.cidaasRegisterDesign);\n    }\n\n    if (!!res) {\n      pkceBody.code = res.code;\n      const data = await this.authService.oAuthCallback(pkceBody, actionType);\n      return data;\n    }\n\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LogService } from '../logger-service/logger.service';\nimport { AuthService } from '../auth-service/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n\n  constructor(\n        private logService: LogService,\n        private authService: AuthService,\n        private router: Router,\n        @Inject('SERVICE_CONFIG') public configuration: any\n    ) {\n    }\n\n  /**\n   * @description This method will check user already login or not\n   * @returns Return the true if user already logged in or else false\n   */\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\n    this.logService.log('can Activate method is called!!!');\n    const loginScreenUrl = this.configuration.globalConfig.loginScreenUrl;\n    try {\n        return this.authService.isLoggedIn().then(isLoggedIn => {\n          this.logService.log('User exist or not', isLoggedIn);\n          if (isLoggedIn) {\n            this.logService.log('Already logged in user!!!');\n            return true;\n          } else {\n            this.logService.log_w('Please do login to continue......');\n            this.router.navigate(['/' + loginScreenUrl]); // this route will be based on parameter passed in global config\n            return false;\n          }\n        });\n      } catch (err) {\n        this.logService.log_e('Error occured in isLoggedIn method');\n        return false;\n      }\n  }\n}\n","/**\n * This is the animation file used for creating animations in the application.\n * For Tab we have to give \"data: { routeIdx: 0 }\" in the routing params. Each component should be given a routeIdx.\n * Then within the tab component (the component which has the tabs) need have the below function.\n * onActivate($event) { this.animationState = this.route.firstChild.snapshot.data['routeIdx'];}\n * And the param to be added is animationState. In the html file for the tab component add the tag\n * <div [@routeAnimations]=\"animationState\"><router-outlet (activate)=\"onActivate($event)\"></router-outlet></div>\n * This way the tab animation would work fine.\n *\n * For other navigations we have animation values as \"TabLevel\", \"SecondLevel\", \"ThirdLevel\", \"Forthlevel\"\n * Add the value properly in your routes for animations and import the slideInAnimation as a param in the Component decorator\n */\n\nimport {\n  transition,\n  trigger,\n  query,\n  style,\n  animate,\n  group,\n  animateChild\n} from '@angular/animations';\n\nexport const slideInAnimation = trigger('routeAnimations', [\n  transition('TabLevel => SecondLevel', [\n    query(\n      ':enter, :leave',\n      style({ position: 'fixed', width: '100%', height: '100%' }),\n      { optional: true }\n    ),\n    group([\n      query(\n        ':enter',\n        [\n          style({ transform: 'translateX(100%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(0%)' }))\n        ],\n        { optional: true }\n      ),\n      query(\n        ':leave',\n        [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(-100%)' }))\n        ],\n        { optional: true }\n      )\n    ])\n  ]),\n  transition('ThirdLevel => ForthLevel', [\n    query(\n      ':enter, :leave',\n      style({ position: 'fixed', width: '100%', height: '100%' }),\n      { optional: true }\n    ),\n    group([\n      query(\n        ':enter',\n        [\n          style({ transform: 'translateX(100%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(0%)' }))\n        ],\n        { optional: true }\n      ),\n      query(\n        ':leave',\n        [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(-100%)' }))\n        ],\n        { optional: true }\n      )\n    ])\n  ]),\n  transition('SecondLevel => ThirdLevel', [\n    query(\n      ':enter, :leave',\n      style({ position: 'fixed', width: '100%', height: '100%' }),\n      { optional: true }\n    ),\n    group([\n      query(\n        ':enter',\n        [\n          style({ transform: 'translateX(100%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(0%)' }))\n        ],\n        { optional: true }\n      ),\n      query(\n        ':leave',\n        [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(-100%)' }))\n        ],\n        { optional: true }\n      )\n    ])\n  ]),\n  transition('SecondLevel => TabLevel', [\n    query(\n      ':enter, :leave',\n      style({ position: 'fixed', width: '100%', height: '100%' }),\n      { optional: true }\n    ),\n    group([\n      query(\n        ':enter',\n        [\n          style({ transform: 'translateX(-100%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(0%)' }))\n        ],\n        { optional: true }\n      ),\n      query(\n        ':leave',\n        [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(100%)' }))\n        ],\n        { optional: true }\n      )\n    ])\n  ]),\n  transition('ForthLevel => ThirdLevel', [\n    query(\n      ':enter, :leave',\n      style({ position: 'fixed', width: '100%', height: '100%' }),\n      { optional: true }\n    ),\n    group([\n      query(\n        ':enter',\n        [\n          style({ transform: 'translateX(-100%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(0%)' }))\n        ],\n        { optional: true }\n      ),\n      query(\n        ':leave',\n        [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(100%)' }))\n        ],\n        { optional: true }\n      )\n    ])\n  ]),\n  transition('ThirdLevel => SecondLevel', [\n    query(\n      ':enter, :leave',\n      style({ position: 'fixed', width: '100%', height: '100%' }),\n      { optional: true }\n    ),\n    group([\n      query(\n        ':enter',\n        [\n          style({ transform: 'translateX(-100%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(0%)' }))\n        ],\n        { optional: true }\n      ),\n      query(\n        ':leave',\n        [\n          style({ transform: 'translateX(0%)' }),\n          animate('0.15s linear', style({ transform: 'translateX(100%)' }))\n        ],\n        { optional: true }\n      )\n    ])\n  ]),\n    transition(':decrement', [\n      query(':enter, :leave', style({ position: 'fixed', width: '100%' }), { optional: true }),\n      group([\n          query(':enter', [style({ transform: 'translateX(-100%)' }), animate('.3s ease-out', style({ transform: 'translateX(0%)' }))], {\n              optional: true,\n          }),\n          query(':leave', [style({ transform: 'translateX(0%)' }), animate('.3s ease-out', style({ transform: 'translateX(100%)' }))], {\n              optional: true,\n          }),\n      ]),\n    ]),\n    transition(':increment', [\n      query(':enter, :leave', style({ position: 'fixed', width: '100%' }), { optional: true }),\n      group([\n          query(':enter', [style({ transform: 'translateX(100%)' }), animate('.3s ease-out', style({ transform: 'translateX(0%)' }))], {\n              optional: true,\n          }),\n          query(':leave', [style({ transform: 'translateX(0%)' }), animate('.3s ease-out', style({ transform: 'translateX(-100%)' }))], {\n              optional: true,\n          }),\n      ]),\n    ]),\n]);\n","// IONIC - ANGULAR\nimport { Inject, Injectable } from '@angular/core';\nimport { LogService } from '../logger-service/logger.service';\nimport { delay } from 'q';\n\n\n@Injectable()\nexport class OnBoardingService {\n  constructor(\n    private logService: LogService,\n  ) {\n  }\n\n  /**\n   * @description This Method is responsible to handle any action to process in betwwen on boarding screens\n   * @param currentPageTitle title for current active page\n   * @param nextPageTitle title for next page\n   * @param prevPageTitle title for prev page\n   */\n  async nextClickActionHandler(currentPageTitle, nextPageTitle, prevPageTitle) {\n    this.logService.log('currentPageTitile -->', currentPageTitle);\n    this.logService.log('nextPageTitle -->', nextPageTitle);\n    this.logService.log('prevPageTitle -->', prevPageTitle);\n\n    await delay(5000);\n\n    return 'success';\n  }\n\n  /**\n   * @description This Method is responsible to handle any action to process in betwwen on boarding screens\n   * @param currentPageTitle title for current active page\n   * @param nextPageTitle title for next page\n   * @param prevPageTitle title for prev page\n   */\n  async prevClickActionHandler(currentPageTitle, nextPageTitle, prevPageTitle) {\n    this.logService.log('currentPageTitile -->', currentPageTitle);\n    this.logService.log('nextPageTitle -->', nextPageTitle);\n    this.logService.log('prevPageTitle -->', prevPageTitle);\n\n    await delay(5000);\n\n    return 'success';\n  }\n\n}\n","export const CommonConstants = {\n  SRV: 'https://private-eb271b-zwaytest.apiary-mock.com/v1/',\n  AUTHENTICATION_URL: 'https://find.z-wave.me/zboxweb',\n  PROXY_CONTROL_URL: 'https://find.z-wave.me/ZAutomation/api/v1/',\n  // GATEWAY_CONTROL_ENDPOINT: 'https://fd2xt8lnsa.execute-api.eu-west-1.amazonaws.com/dev/api/v1/gateways/control',\n  //    GATEWAY_CONTROL_ENDPOINT: 'https://postb.in/uPTXSyId/',\n  LECKAGE_PROTECTION_ID: 123,\n  WATER_SENSOR_ID: 456,\n  LECKAGE_MANUFACTURER_ID: 1043,\n  LECKAGE_MANUFACTURER_PRODUCT_ID: 1,\n  LECKAGE_MANUFACTURER_TYPE: 1\n};\n\nexport enum GatewayCredentialsTypes {\n  ADMIN = 'admin',\n  LOCAL = 'local',\n  REMOTE = 'remote'\n}\n\nexport interface GatewayCredentials {\n  user: string;\n  password: string;\n  type: GatewayCredentialsTypes;\n}\n\nexport enum SupportedDeviceTypes {\n  leckageDetector = 'LeckageDetector',\n  floodSensorRehau = 'FloodSensorRehau',\n  floodSensorOther = 'FloodSensorOther'\n}\n\nexport interface PairedDevicesData {\n  vendorId: string;\n  productId: string;\n  productType: string;\n  serialnumber: string;\n  nodeId: string;\n  deviceName: string;\n  type: SupportedDeviceTypes;\n  creationTime: Date;\n  virtualDevices: IVirtualDevice[];\n}\n\nexport interface Gateway {\n  id?: string;\n  boxId?: string;\n  localIp?: string;\n  credentials?: GatewayCredentials[];\n  password?: string;\n  homeId?: string;\n  homeGwId?: string;\n  pairedDevices?: PairedDevicesData[];\n  leckageDeviceId?: number;\n  waterSensorDeviceId?: number;\n  claimed?: boolean;\n  remoteAccessActivated?: boolean;\n}\n\nexport interface ILogoutInterface {\n  observerId: number;\n  onLogout(): Promise<any>;\n}\n\nexport const gatewayDeviceControlEndpoint = 'https://fieldtest.smarthome-dev.aws.rehau.com' + '/deviceControl/api/v1';\n\n\n// gatewayAclService interafece\n\nexport const gatewayAclEndpoint = 'https://fieldtest.smarthome-dev.aws.rehau.com' + '/acl/api/v1';\n\nexport enum GatewayAclServiceUserGatewayCredsType {\n  ADMIN = 'admin',\n  LOCAL = 'local',\n  REMOTE = 'remote'\n}\n\n\nexport interface GatewayAclServiceUserHomeGatewaysCredentials {\n  user: string;\n  password: string;\n  type: GatewayAclServiceUserGatewayCredsType;\n  boxId?: string;\n}\n\nexport interface GatewayAclServiceUserHomeGatewaysCredentialsDictionary {\n  [username: string]: GatewayAclServiceUserHomeGatewaysCredentials;\n}\n\nexport interface GatewayAclServiceUserHomeGateway {\n  homeGwId: string;\n  gwMac?: string;\n  userCredentials?: GatewayAclServiceUserHomeGatewaysCredentialsDictionary;\n}\n\nexport interface GatewayAclServiceUserHomeGatewaysDictionary {\n  [homeGwId: string]: GatewayAclServiceUserHomeGateway;\n}\n\nexport interface GatewayAclServiceUserHome {\n  homeId: string;\n  id?: string;\n  masterUser?: string;\n  gateways: GatewayAclServiceUserHomeGatewaysDictionary;\n}\n\nexport interface GatewayAclServiceHomeDictionary {\n  [homeId: string]: GatewayAclServiceUserHome;\n}\n\nexport interface GatewayAclServiceUser {\n  id: string;\n  ssoId: string;\n  homes: GatewayAclServiceHomeDictionary;\n  type: string;\n}\n\n// gatewayDeviceControlService interface\n\n\nexport interface IGatewayReducedReturn {\n  id: string;\n  boxId: string;\n  localIp: string;\n  pairedDevices: IPairedDevicesData[];\n  remoteAccessActivated: boolean;\n  homeGwId: string;\n  homeId: string;\n  type: string;\n}\n\nexport enum ISupportedDeviceTypes {\n  leckageDetector = 'LeckageDetector',\n  floodSensorRehau = 'FloodSensorRehau',\n  floodSensorOther = 'FloodSensorOther',\n  otherDevice = 'otherDevice'\n}\n\nexport interface IVirtualDevice {\n  vDevId: string;\n  deviceType: string;\n}\n\nexport interface IPairedDevicesData {\n  vendorId: string;\n  productId: string;\n  productType: string;\n  serialnumber: string;\n  nodeId: string;\n  deviceName: string;\n  type: ISupportedDeviceTypes;\n  creationTime: Date;\n  virtualDevices: IVirtualDevice[];\n}\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, flatMap, retryWhen, timeout } from 'rxjs/operators';\nimport { retryBackoff } from 'backoff-rxjs';\nimport { AuthService } from '../auth-service/auth.service';\nimport { WebService } from '../web-service/web.service';\nimport { LogService } from '../logger-service/logger.service';\nimport {\n  gatewayAclEndpoint,\n  GatewayAclServiceUserGatewayCredsType,\n  GatewayCredentialsTypes,\n  GatewayCredentials,\n  Gateway,\n  GatewayAclServiceUserHome,\n  GatewayAclServiceUser\n} from '../../models/getway.model';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GatewayAclService {\n  private static INIT_INTERVAL = 2000;\n  private static MAX_INTERVAL = 6000;\n  private static MAX_RETRIES = 3;\n  private static REQ_TIMEOUT = 8000;\n\n\n\n  private storageName = 'gateway_device';\n\n  constructor(\n    private httpClient: HttpClient,\n    private authService: AuthService,\n    private webService: WebService,\n    private logService: LogService\n  ) {\n  }\n\n  async cloudGetHomes(accessToken: string): Promise<{ homes: GatewayAclServiceUserHome[], response: GatewayAclServiceUser }> {\n    try {\n      const gatewayAclUser = await this.userControllerGET(accessToken);\n      const result: GatewayAclServiceUserHome[] = [];\n      for (const homeId of Object.keys(gatewayAclUser.homes)) {\n        result.push(gatewayAclUser.homes[homeId]);\n      }\n      return { homes: result, response: gatewayAclUser };\n    } catch (e) {\n      console.error('gatewayAclServer::cloudGetHomes: Could not fetch Homes ' + JSON.stringify(e));\n      return { homes: [], response: null };\n    }\n  }\n\n  async userControllerGET(accessToken: string): Promise<GatewayAclServiceUser> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        // tslint:disable-next-line:object-literal-key-quotes\n        'access_token': accessToken,\n        'x-correlation-id': await this.authService.getCorrelationId()\n      })\n    };\n\n    const url = gatewayAclEndpoint + '/users/';\n    const retryConfig = {\n      REQ_TIMEOUT: GatewayAclService.REQ_TIMEOUT,\n      INIT_INTERVAL: GatewayAclService.INIT_INTERVAL,\n      MAX_INTERVAL: GatewayAclService.MAX_INTERVAL,\n      MAX_RETRIES: GatewayAclService.MAX_RETRIES,\n    };\n    const gwUser: GatewayAclServiceUser = await this.webService.getApi(url, httpOptions, retryConfig).toPromise();\n\n    this.logService.log(gwUser);\n    return gwUser;\n  }\n\n  async getGatewaysToHome(accessToken: string, homeId: string, aclUser: GatewayAclServiceUser): Promise<Gateway[]> {\n    const result: Gateway[] = [];\n    for (const gatewayId of Object.keys(aclUser.homes[homeId].gateways)) {\n      const gwResult: Gateway = {\n        credentials: []\n      };\n      for (const credId of Object.keys(aclUser.homes[homeId].gateways[gatewayId].userCredentials)) {\n        gwResult.homeGwId = gatewayId;\n        console.log('Getting credId: ' + credId);\n        const credentials = aclUser.homes[homeId].gateways[gatewayId].userCredentials[credId];\n        console.log('Getting homeId: ' + homeId);\n        console.log(credentials);\n        if (credentials.type === GatewayAclServiceUserGatewayCredsType.ADMIN ||\n          credentials.type === GatewayAclServiceUserGatewayCredsType.LOCAL ||\n          credentials.type === GatewayAclServiceUserGatewayCredsType.REMOTE) {\n          const newCreds: GatewayCredentials = {\n            user: credentials.user,\n            password: credentials.password,\n            type: credentials.type === 'admin' ? GatewayCredentialsTypes.ADMIN :\n              credentials.type === 'local' ? GatewayCredentialsTypes.LOCAL :\n                credentials.type === 'remote' ? GatewayCredentialsTypes.REMOTE :\n                  null\n          };\n          console.log('Got correct type! ' + JSON.stringify(newCreds));\n          gwResult.credentials.push(newCreds);\n        }\n      }\n      result.push(gwResult);\n    }\n    return result;\n  }\n\n  async getHomeOfUser(accessToken: string, homeID: string) {\n    console.log('GatewayACLService::getHomeOfUser: ' + accessToken + ' for HomeID ' + homeID);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        access_token: accessToken,\n        'x-correlation-id': await this.authService.getCorrelationId()\n      })\n    };\n\n    const url = gatewayAclEndpoint + '/users/homes/' + homeID;\n    const retryConfig = {\n      REQ_TIMEOUT: GatewayAclService.REQ_TIMEOUT,\n      INIT_INTERVAL: GatewayAclService.INIT_INTERVAL,\n      MAX_INTERVAL: GatewayAclService.MAX_INTERVAL,\n      MAX_RETRIES: GatewayAclService.MAX_RETRIES,\n    };\n    const home: GatewayAclServiceUserHome = await this.webService.getApi(url, httpOptions, retryConfig).toPromise();\n\n    this.logService.log(home);\n    return home;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { GatewayAclService } from './gatewayAcl.service';\nimport { AuthService } from '../auth-service/auth.service';\nimport { CacheService } from '../cache-service/cache.service';\nimport { WebService } from '../web-service/web.service';\nimport { LogService } from '../logger-service/logger.service';\nimport {\n  CommonConstants,\n  GatewayCredentialsTypes,\n  Gateway,\n  ILogoutInterface,\n  gatewayDeviceControlEndpoint\n} from '../../models/getway.model';\n\nexport class GatewayAlreadyConfiguredError extends Error {\n  constructor(m: string) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, GatewayAlreadyConfiguredError.prototype);\n  }\n}\n\nexport class GatewaySerialNotFoundError extends Error {\n  constructor(m: string) {\n    super(m);\n    this.name = 'GatewaySerialNotFoundError';\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, GatewayAlreadyConfiguredError.prototype);\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GatewayService implements ILogoutInterface {\n  private static INIT_INTERVAL_REMOTE = 2000;\n  private static MAX_INTERVAL_REMOTE = 6000;\n  private static REQ_TIMEOUT_REMOTE = 20000;\n\n  private static INIT_INTERVAL_LOCAL = 2000;\n  private static MAX_INTERVAL_LOCAL = 6000;\n  private static REQ_TIMEOUT_LOCAL = 6000;\n\n  observerId = 48976446132111;\n\n  private localOnline;\n  private remoteOnline;\n  private completedFirstRun = false;\n  private storageName = 'gateway_device';\n\n  constructor(\n    private http: HttpClient,\n    private gatewayAclService: GatewayAclService,\n    private authService: AuthService,\n    private cacheService: CacheService,\n    private webService: WebService,\n    private logService: LogService,\n  ) {\n  }\n\n\n  /**\n   * @description Calls the Gateway API\n   * @param gateway gateWay Information\n   * @param apiEndpoint This is Api End P{oints}\n   * @param method Specific Method To Follow\n   * @param body Body If It is a POST Api Call\n   * @param headers not used right now\n   * @param connectionType explicitly decide, if it should be called locally, or remotely. Default: remote\n   */\n  async callApi(\n    gateway: Gateway,\n    apiEndpoint: string,\n    method: string = 'get',\n    body: any | null = null,\n    headers?: {},\n    connectionType?: 'remote' | 'local' | 'admin',\n    retryLocal: number = 2,\n    retryRemote: number = 3,\n    killRequestObject: { continue: boolean } = { continue: true },\n    localResponseType: string = 'json'\n  ) {\n    const retryConfig = {\n      REQ_TIMEOUT: GatewayService.REQ_TIMEOUT_LOCAL,\n      INIT_INTERVAL: GatewayService.INIT_INTERVAL_LOCAL,\n      MAX_INTERVAL: GatewayService.MAX_INTERVAL_LOCAL,\n      MAX_RETRIES: retryLocal,\n    };\n\n    // If no connection Type is given and the Method is run for the first Time\n    if (!connectionType && this.completedFirstRun) {\n      if (this.localOnline) {\n        connectionType = 'local';\n      } else if (this.remoteOnline) {\n        connectionType = 'remote';\n      } else {\n        // go to race between remote and local\n        connectionType = undefined;\n      }\n    }\n\n    // try remote call first, else try local\n    let username: string;\n    let password: string;\n    const useCredentials =\n      connectionType === 'local'\n        ? GatewayCredentialsTypes.LOCAL\n        : GatewayCredentialsTypes.REMOTE;\n\n    // this.logService.log('cred type: ' + useCredentials);\n    for (const creds of gateway.credentials) {\n      // this.logService.log('iterate creds' + JSON.stringify(creds));\n      if (creds.type === useCredentials) {\n        username = creds.user;\n        password = creds.password;\n      }\n    }\n\n    if (username === undefined || password === undefined) {\n      throw new Error('Username or Password undefined');\n    }\n\n    if (connectionType === 'remote') {\n      this.logService.log('Connection is remote');\n      const requestBody = {\n        boxId: gateway.boxId,\n        username,\n        password,\n        urlEndpoint: apiEndpoint,\n        method,\n        body: undefined\n      };\n      if (\n        method.toUpperCase() === 'POST' ||\n        method.toUpperCase() === 'PUT' ||\n        method.toUpperCase() === 'PATCH'\n      ) {\n        requestBody.body = JSON.stringify(body);\n      }\n      const user: any = await this.authService.getUser();\n\n      const requestHeader = {\n        access_token: user.access_token\n      };\n\n      try {\n        requestHeader[\n          'x-correlation-id'\n        ] = await this.authService.getCorrelationId();\n      } catch (e) {\n        this.logService.log_e(e);\n      }\n      const url = gatewayDeviceControlEndpoint + '/gateways/control';\n      const httpOption = {\n        headers: requestHeader\n      };\n      try {\n        const apiResponse = await this.webService.postApi(url, requestBody, httpOption, retryConfig).toPromise();\n        this.remoteOnline = true;\n        this.completedFirstRun = true;\n        return apiResponse;\n      } catch (e) {\n        this.logService.log_e(\n          'gatewayservice::callApi: Network error remote request' +\n          JSON.stringify(e)\n        );\n        this.remoteOnline = false;\n      }\n    } else if (connectionType === 'local' || connectionType === 'admin') {\n      this.logService.log('Connection is local');\n      const basicAuthString = 'Basic ' + btoa(username + ':' + password);\n      // const user = await this.userService.getUser();\n      try {\n        const httpOptions = {\n          headers: { Authorization: basicAuthString }\n        };\n        if (\n          method.toUpperCase() !== 'GET' &&\n          method.toUpperCase() !== 'OPTIONS'\n        ) {\n          // tslint:disable-next-line:no-string-literal\n          httpOptions['body'] = body;\n        }\n        // tslint:disable-next-line:no-string-literal\n        httpOptions['responseType'] = localResponseType;\n        const url = 'http://' + gateway.localIp + ':8083/' + apiEndpoint;\n\n        // Create separate method for request API\n        const apiResponse = await this.webService.requestApi(method, url, httpOptions, retryConfig).toPromise();\n        this.localOnline = true;\n        this.completedFirstRun = true;\n        return apiResponse;\n      } catch (e) {\n        this.logService.log_e(\n          'gatewayservice::callApi: Network error local request' +\n          JSON.stringify(e)\n        );\n        this.localOnline = false;\n        if (!connectionType) {\n          return await this.callApi(\n            gateway,\n            apiEndpoint,\n            method,\n            body,\n            headers,\n            'remote'\n          );\n        } else {\n          throw e;\n        }\n      }\n    } else if (!connectionType) {\n      // Do requests in parallel, if no connectionType is specified\n      const curtime = new Date().getTime();\n      const cancelRequestLocal = { continue: true };\n      const cancelRequestRemote = { continue: true };\n      const remotePromise = this.callApi(\n        gateway,\n        apiEndpoint,\n        method,\n        body,\n        headers,\n        'remote',\n        undefined,\n        undefined,\n        cancelRequestRemote\n      );\n      const localPromise = this.callApi(\n        gateway,\n        apiEndpoint,\n        method,\n        body,\n        headers,\n        'local',\n        undefined,\n        undefined,\n        cancelRequestLocal\n      );\n      try {\n        // wait for first to finish\n        const response = await Promise.race([remotePromise, localPromise]);\n        cancelRequestLocal.continue = false;\n        cancelRequestRemote.continue = false;\n        return response;\n      } catch (e) {\n        // jumps in this catch, if one of the request fails\n        this.logService.log_e('gatewayservice::callApi: parallel promise failed ' + e);\n        // wait for both to finish\n        // the promise that failed before will fail again here and throw an exception\n        // the other one is still open and could resolve or reject\n        let result;\n        try {\n          result = await remotePromise;\n          this.remoteOnline = true;\n        } catch (e) {\n          this.remoteOnline = false;\n          this.logService.log_e(\n            'gatewayservice::callApi: remote request failed with error ' +\n            JSON.stringify(e)\n          );\n        }\n        try {\n          result = await localPromise;\n          this.localOnline = true;\n        } catch (e) {\n          this.localOnline = false;\n          this.logService.log_e(\n            'gatewayservice::callApi: Local request failed with error ' +\n            JSON.stringify(e)\n          );\n        }\n        if (result === undefined) {\n          throw new Error('gatewayservice::callApi: Both requests failed');\n        }\n        return result;\n      }\n    }\n  }\n\n  /**\n   * @description Calls the ZWaveAPI and get data for all the conected devices\n   * @param gateway gateWay Information\n   * @param getMock bollean type\n   * @param doDefaultRetrys retry parameter type boolean\n   */\n  async getLeckageDeviceConnectedToGateway(\n    gateway: Gateway,\n    getMock: boolean = false,\n    doDefaultRetrys = false\n  ) {\n    // if (getMock) {\n    //   return [\n    //     {\n    //       nodeId: 3,\n    //       givenName: 'MockDevice'\n    //     }\n    //   ];\n    // }\n    let allDevices;\n    if (doDefaultRetrys) {\n      allDevices = await this.callApi(\n        gateway,\n        'ZWaveAPI/Data',\n        'get',\n        null,\n        null,\n        null\n      );\n    } else {\n      allDevices = await this.callApi(\n        gateway,\n        'ZWaveAPI/Data',\n        'get',\n        null,\n        null,\n        null,\n        1,\n        1\n      );\n    }\n\n    const foundDevices = [];\n    this.logService.log('gatewayService::got devices: ' + JSON.stringify(allDevices));\n    // tslint:disable-next-line:forin\n    for (const nodeId in allDevices.devices) {\n      const device = allDevices.devices[nodeId];\n      if (\n        device.data.manufacturerId.value ===\n        CommonConstants.LECKAGE_MANUFACTURER_ID &&\n        device.data.manufacturerProductId.value ===\n        CommonConstants.LECKAGE_MANUFACTURER_PRODUCT_ID &&\n        device.data.manufacturerProductType.value ===\n        CommonConstants.LECKAGE_MANUFACTURER_TYPE\n      ) {\n        foundDevices.push({\n          nodeId,\n          givenName: device.data.givenName.value\n        });\n      }\n\n    }\n    return foundDevices;\n  }\n\n  /**\n   * @description not in use\n   */\n  async onLogout() {\n    // await this.localStorageService.removePersistentItem(this.storageName);\n  }\n\n  /**\n   * @description method to save the gateway object in local storage for persistence use\n   * @param accessToken accesstoken\n   * @param gateway object to save\n   */\n  async saveGateway(accessToken: string, gateway: Gateway) {\n    this.logService.log(accessToken);\n    this.cacheService.setLocalData(this.storageName, JSON.stringify(gateway));\n  }\n\n  /**\n   * @description method to fetch gateway object from local storage and return parse gateway object\n   * @param accessToken access token\n   */\n  async getPairedGateway(accessToken: string): Promise<Gateway> {\n    this.logService.log('in get pair getway service', accessToken);\n    const rawGatewayObject = JSON.stringify(this.cacheService.getLocalData(\n      this.storageName\n    ));\n    this.logService.log(rawGatewayObject);\n    const gw: Gateway = JSON.parse(rawGatewayObject);\n    return gw;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { AuthService } from '../auth-service/auth.service';\nimport { WebService } from '../web-service/web.service';\nimport {\n  Gateway,\n  gatewayDeviceControlEndpoint\n} from '../../models/getway.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GatewayDeviceControlService {\n  private static INIT_INTERVAL = 2000;\n  private static MAX_INTERVAL = 6000;\n  private static MAX_RETRIES = 3;\n  private static REQ_TIMEOUT = 6000;\n\n  constructor(\n    private authService: AuthService,\n    private webService: WebService\n  ) { }\n\n  async updateGatewayData(gateway: Gateway, mac: string, accessToken: string) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        // tslint:disable-next-line:object-literal-key-quotes\n        'access_token': accessToken,\n        'x-correlation-id': await this.authService.getCorrelationId()\n      })\n    };\n\n    const url = gatewayDeviceControlEndpoint + '/gateways/' + mac;\n    const retryConfig = {\n      REQ_TIMEOUT: GatewayDeviceControlService.REQ_TIMEOUT,\n      INIT_INTERVAL: GatewayDeviceControlService.INIT_INTERVAL,\n      MAX_INTERVAL: GatewayDeviceControlService.MAX_INTERVAL,\n      MAX_RETRIES: GatewayDeviceControlService.MAX_RETRIES,\n    };\n    const apiResponse: Gateway = await this.webService.getApi(url, httpOptions, retryConfig).toPromise();\n\n    if (\n      apiResponse.boxId &&\n      apiResponse.homeGwId &&\n      apiResponse.homeId &&\n      apiResponse.id &&\n      apiResponse.localIp\n    ) {\n      gateway.boxId = apiResponse.boxId;\n      gateway.homeGwId = apiResponse.homeGwId;\n      gateway.homeId = apiResponse.homeId;\n      gateway.id = apiResponse.id;\n      gateway.localIp = apiResponse.localIp;\n    } else {\n      throw new Error('Could not fetch Gateway, empty response!');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { AuthService } from '../auth-service/auth.service';\nimport { GatewayService } from '../gateway-service/gateway.service';\nimport { LogService } from '../logger-service/logger.service';\n\nexport const onlineOfflineData = new Subject();\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OnlineOfflineService {\n  // observerId = 5689564564;\n\n  // private observer: IOnlineOfflineObserver[] = [];\n  private refreshTime = 5000;\n  failureRate = new BehaviorSubject<number>(0);\n\n  REGUARD_OFFLINE = false;\n\n  private tickInterval;\n  private remoteOnline = true;\n  private localOnline = true;\n\n  constructor(\n    private authService: AuthService,\n    private gatewayService: GatewayService,\n    private logService: LogService,\n  ) {\n    // ngOnInit not supported for services so logic has to be in constructor\n    this.logService.log('onlineOffline::onInit');\n    // this.initialize();\n  }\n\n  async initialize() {\n    this.logService.log('onlineOffline::initialize');\n    clearInterval(this.tickInterval);\n    this.tickInterval = setInterval(() => {\n      this.tick();\n    }, this.refreshTime);\n  }\n\n  private async tick() {\n    this.logService.log('onlineOffline::tick');\n    const localBefore = this.localOnline;\n    const remoteBefore = this.remoteOnline;\n    // await this.checkLocalConnection();\n    // await this.checkRemoteConnection();\n\n    await this.checkConnection('local');\n    await this.checkConnection('remote');\n\n    if (\n      localBefore !== this.localOnline ||\n      remoteBefore !== this.remoteOnline\n    ) {\n      this.notify();\n    }\n  }\n\n  private notify() {\n    this.logService.log('onlineOffline::notify');\n    onlineOfflineData.next({ localOnline: this.localOnline, remoteOnline: this.remoteOnline });\n  }\n\n  private async checkConnection(type) {\n    const user = await this.authService.getUser();\n    const gateway = await this.gatewayService.getPairedGateway(\n      user.access_token\n    );\n    try {\n      const response = await this.gatewayService.callApi(\n        gateway,\n        'ZAutomation/api/v1/status',\n        'get',\n        null,\n        null,\n        type\n      );\n      if (response !== undefined && response.code === 200) {\n        if (type === 'local') {\n          this.localOnline = true;\n        } else {\n          this.remoteOnline = true;\n        }\n      } else {\n        this.logService.log('onlineOffline::local offline-- ' + JSON.stringify(response));\n        // this.localOnline = true;\n        if (type === 'local') {\n          this.localOnline = false;\n        } else {\n          this.remoteOnline = false;\n        }\n      }\n    } catch (e) {\n      this.logService.log('onlineOffline::local offline catch');\n      if (type === 'local') {\n        this.localOnline = false;\n      } else {\n        this.remoteOnline = false;\n      }\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CacheService } from '../cache-service/cache.service';\n\nexport enum FlowUnit {\n  FLOW_L_M = 'L/M',\n  FLOW_L_H = 'L/H',\n  FLOW_M3_H = 'm3/H'\n}\n\nexport enum AmountUnit {\n  AMOUNT_LITERS = 'l',\n  AMOUNT_CUBICMETERS = 'm3'\n}\n\nexport enum TemperatureUnit {\n  TEMPERATURE_C = 'C',\n  TEMPERATURE_F = 'F'\n}\n\nexport enum PressureUnit {\n  PRESSURE_BAR = 'Bar',\n  PRESSURE_PA = 'Pa'\n}\n\nexport class Settings {\n  amountUnit: AmountUnit = AmountUnit.AMOUNT_LITERS;\n  flowUnit: FlowUnit = FlowUnit.FLOW_L_H;\n  pressureUnit: PressureUnit = PressureUnit.PRESSURE_BAR;\n  temperatureUnit: TemperatureUnit = TemperatureUnit.TEMPERATURE_C;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SensorSettingService {\n  private storageName = 'user_settings';\n\n  constructor(private cacheService: CacheService) { }\n\n  /**\n   * @description convert the amount parameters to specific value\n   * @param unit amount parameter to change\n   * @param inValue initial value of unit\n   */\n  convertAmount(unit: AmountUnit, inValue: number): string {\n    console.log('Hy I am Unit', unit);\n    if (unit === AmountUnit.AMOUNT_LITERS) {\n      return this.roundValueToZeroDigits(inValue * 1000);\n    } else if (unit === AmountUnit.AMOUNT_CUBICMETERS) {\n      return this.roundValue(inValue);\n    } else {\n      return this.roundValueToZeroDigits(inValue * 1000);\n    }\n  }\n\n  /**\n   * @description convert the flow parameters to specific value\n   * @param unit flow parameter to change\n   * @param inValue initial value of unit\n   */\n  convertFlow(unit: FlowUnit, inValue: number): string {\n    if (unit === FlowUnit.FLOW_L_M) {\n      return this.roundValue(inValue / 60);\n    } else if (unit === FlowUnit.FLOW_L_H) {\n      return this.roundValueToZeroDigits(inValue);\n    } else if (unit === FlowUnit.FLOW_M3_H) {\n      return this.roundValue(inValue / 1000);\n    } else {\n      return this.roundValue(inValue / 60);\n    }\n  }\n\n  /**\n   * @description convert the temperature parameters to specific value\n   * @param unit unit of parameter to change\n   * @param inValue initial value of unit\n   */\n  convertTemp(unit: TemperatureUnit, inValue: number): string {\n    if (unit === TemperatureUnit.TEMPERATURE_C) {\n      return this.roundValue(inValue);\n    } else if (unit === TemperatureUnit.TEMPERATURE_F) {\n      return this.roundValue((inValue * 9) / 5 + 32);\n    } else {\n      return this.roundValue(inValue);\n    }\n  }\n\n  /**\n   * @description convert the pressure parameters to specific value\n   * @param unit unit of parameter to change\n   * @param inValue initial value of unit\n   */\n  convertPressure(unit: PressureUnit, inValue: number): string {\n    if (unit === PressureUnit.PRESSURE_BAR) {\n      return this.roundValue(inValue / 100);\n    } else if (unit === PressureUnit.PRESSURE_PA) {\n      return this.roundValue(inValue);\n    } else {\n      return this.roundValue(inValue / 100);\n    }\n  }\n\n  /**\n   * @description get settings parameter object from local storage\n   */\n  async getSettings(): Promise<Settings> {\n    let gw: Settings = new Settings();\n    const rawGatewayObject: any = this.cacheService.getLocalData(this.storageName);\n    if (rawGatewayObject !== null) {\n      gw = (rawGatewayObject);\n    }\n    if (gw == null) {\n      console.log('GW was null, create new object');\n      gw = new Settings();\n    }\n    return gw;\n  }\n\n  /**\n   * @description set settings parameter object in local storage\n   * @param settings object to store\n   */\n  async setSettings(settings: Settings) {\n    this.cacheService.setLocalData(this.storageName, (settings));\n  }\n\n  private roundValue(value: number): string {\n    return value.toFixed(1);\n  }\n\n  private roundValueToZeroDigits(value: number): string {\n    return value.toFixed(0);\n  }\n}\n","\nexport interface Sensor {\n  title: string;\n  subTitle: string;\n  value: string;\n  timestamp?: number;\n}\n\nexport enum SupportedDeviceTypes {\n  leckageDetector = 'LeckageDetector',\n  floodSensorRehau = 'FloodSensorRehau',\n  floodSensorOther = 'FloodSensorOther'\n}\n\nexport interface VirtualDevice {\n  creationTime: number;\n  creatorId: number;\n  customIcons: any;\n  deviceType: string;\n  h: number;\n  hasHistory: boolean;\n  id: string;\n  location: number;\n  metrics: VirtualDeviceMetrics;\n  order: VirtualDeviceOrder;\n  permanently_hidden: false;\n  probeType: string;\n  tags: string[];\n  updateTime: number;\n  visibility: boolean;\n}\nexport interface VirtualDeviceOrder {\n  rooms: number;\n  elements: number;\n  ashboard: number;\n  room: number;\n}\n\nexport class DeviceMetric {\n  icon: string;\n  title: string;\n  isFailed: boolean;\n  level: any;\n  scaleTitle: any;\n}\n\nexport class DeviceOrder {\n  rooms: number;\n  elements: number;\n  ashboard: number;\n  room: number;\n}\n\nexport class DeviceData {\n  creationTime: number;\n  creatorId: number;\n  customIcons = {};\n  deviceType: string;\n  h: number;\n  hasHistory: boolean;\n  id: string;\n  location: number;\n  metrics: DeviceMetric;\n  order: DeviceOrder;\n  // tslint:disable-next-line:variable-name\n  permanently_hidden: false;\n  probeType: string;\n  tags: string[] = [];\n  updateTime: number;\n  visibility: boolean;\n}\n\nexport interface VirtualDeviceMetrics {\n  icon: string;\n  title: string;\n  level: string;\n  lastLevel: string;\n  modificationTime: string;\n  scaleTitle: any;\n  isFailed: boolean;\n}\n\nexport interface DeviceMap {\n  updateTime: string;\n  devices: { [id: string]: VirtualDevice };\n}\n\nexport class SafeGuardDevice {\n  mainDevice: DeviceData;\n  sensorDevices: DeviceData[] = [];\n  async getAllConfigParams() {\n    return 1;\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport {\n  OnlineOfflineService, onlineOfflineData,\n} from '../onlineOffline-service/onlineOffline.service';\nimport { AuthService } from '../auth-service/auth.service';\nimport { GatewayService } from '../gateway-service/gateway.service';\nimport { CacheService } from '../cache-service/cache.service';\nimport { SensorSettingService } from '../leakage-helper-service/settings.service';\nimport {\n  Sensor,\n  VirtualDevice,\n  DeviceData,\n  DeviceMap,\n  SafeGuardDevice\n} from '../../models/zAutomation.model';\nimport { Gateway } from '../../models/getway.model';\nimport { LogService } from '../logger-service/logger.service';\n\nexport const sensorUpdateSub = new Subject();\nexport const sensorsDataSub = new Subject();\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ZAutomationService {\n  appStartTime = Math.floor(new Date().getTime() / 1000);\n\n\n  device: SafeGuardDevice;\n\n  tickInterval;\n  private storageName = 'zautomation_object';\n  // tslint:disable-next-line:variable-name\n  private _deviceMap: DeviceMap;\n  get deviceMap(): DeviceMap {\n    return this._deviceMap;\n  }\n  set deviceMap(value: DeviceMap) {\n    this._deviceMap = value;\n    this.setConfigWrapperToStorage(value);\n  }\n  // private observer: IzAutomationObserver[] = [];\n  private remoteOnline = true;\n  private localOnline = true;\n  private refreshTime = 2500;\n  private freezeButtonUntil = 0;\n  safeGuardChecked: any = { flag: false };\n  failureRate = new BehaviorSubject<number>(0);\n  constructor(\n    private onlineOfflineService: OnlineOfflineService,\n    private authService: AuthService,\n    private gatewayService: GatewayService,\n    private settingService: SensorSettingService,\n    private logService: LogService,\n    private cacheService: CacheService,\n  ) {\n    this.logService.log('zAutomationAPI::onInit');\n    if (this.cacheService.getLocalData('safeGuardChecked')) {\n      this.safeGuardChecked = this.cacheService.getLocalData('safeGuardChecked');\n    }\n    // this.onlineOfflineService.subscribe(this);\n    onlineOfflineData.subscribe((data: any) => {\n      this.onlineOfflineUpdate(data.localOnline, data.remoteOnline);\n    });\n  }\n\n  /**\n   * @description function to maintain the state of variables localOnline and remoteOnline\n   * @param localOnline boolean value true if device connected localy\n   * @param remoteOnline boolean value true if device connected remotely\n   */\n  onlineOfflineUpdate(localOnline: boolean, remoteOnline: boolean) {\n    this.logService.log(\n      'zAutomationAPI::onlineOfflineUpdate ' + localOnline + ' ' + remoteOnline\n    );\n    this.remoteOnline = remoteOnline;\n    this.localOnline = localOnline;\n  }\n\n  /**\n   * @description this method will initialize onlineOfflineService\n   * @description and continuosly check for device connectivity status\n   * @description it will continuosly call tick method which will fetch connected device info\n   */\n  public initialize() {\n    this.logService.log('initialize method call-- in zAutomation service');\n    clearInterval(this.tickInterval);\n    this.onlineOfflineService.initialize();\n    // this.onlineOfflineInitialize();\n    this.tick(true);\n    this.logService.log('Tick Runs 1st Time ------------------->');\n    this.tickInterval = setInterval(async () => {\n      // await this.onlineOfflineInitialize();\n      this.tick(false);\n    }, this.refreshTime);\n  }\n\n  /**\n   * @description if device is connected either localy or remotely then this function will call the polldata function\n   * @description to get the connected device info\n   * @param firstRun is to check whether function is hitted very first time as need to\n   * fetch zAutomation object from local storage in first run\n   */\n  private async tick(firstRun: boolean) {\n    this.logService.log('in tick function zAutomation service');\n    // if (this.observer.length > 0) {\n    this.logService.log('zAutomationAPI::tick');\n    try {\n      if (!this.localOnline && !this.remoteOnline) {\n        this.logService.log('zAutomationAPI::no tick, because Offline');\n        return;\n      }\n      const user = await this.authService.getUser();\n      const gw = await this.gatewayService.getPairedGateway(\n        user.access_token\n      );\n\n      if (gw.leckageDeviceId !== undefined) {\n        if (firstRun) {\n          this.logService.log('zAutomationAPI::firstRunLoad');\n          this._deviceMap = await this.getConfigWrapperFromStorage();\n          this.notify();\n        } else {\n          // if (firstRun || this.observer.length > 0) {\n          this.logService.log('zAutomationAPI::tick::polldata');\n          this.logService.log('DEBUG firstrun:' + firstRun);\n          await this.pollData();\n        }\n        // if (this.observer.length === 0) {\n        //   this.logService.log('DEBUG observer length 0');\n        //   // return;\n        // }\n        this.decFailureRate();\n      } else {\n        this.logService.log(\n          'zAutomationAPI::tick: leackage device undefined, skipping network requests'\n        );\n      }\n    } catch (e) {\n      this.logService.log(\n        'zAutomationAPI::tick:Catch: Could not get tick, error: ' +\n        e.message +\n        ';;;;;;;' +\n        e.stack\n      );\n      this.incFailureRate();\n    }\n  }\n\n  /**\n   * @description this function will call fetchpull data to either get whole data or to get data from last update time\n   */\n  private async pollData() {\n    if (\n      this.deviceMap &&\n      this.deviceMap.updateTime &&\n      Object.keys(this.deviceMap.devices).length > 0\n    ) {\n      this.logService.log('zAutomationAPI::pollData: Polling delta data');\n      await this.fetchPollData('delta'); // passing parameter delta to fetch data from last upodatetime\n    } else {\n      this.logService.log('zAutomationAPI::pollData: Polling complete data');\n      await this.fetchPollData('complete'); // passing parameter complete to get whole object\n    }\n  }\n\n  /**\n   * @description call device API and get the data either complete or from last update time based on parameter passed\n   * @param type should be delta if need to fetch data using last update time else complete\n   */\n  private async fetchPollData(type) {\n    this.logService.log('in fetchPollData method');\n    let url;\n    if (type === 'delta') {\n      url = 'ZAutomation/api/v1/devices?since=' + this.deviceMap.updateTime;\n      // url = 'ZWaveAPI/Data/' + this.deviceMap.updateTime;\n    } else {\n      url = 'ZAutomation/api/v1/devices';\n      // url = 'ZWaveAPI/Data/?call=4';\n    }\n\n    const newWrapper: DeviceMap = { updateTime: '', devices: null };\n    this.logService.log('zAutomationAPI::pollCompleteData');\n    const user = await this.authService.getUser();\n    const gateway = await this.gatewayService.getPairedGateway(\n      user.access_token\n    );\n    const pollObject = await this.gatewayService.callApi(\n      gateway,\n      url\n    );\n    this.logService.log('I am PollObject, I might have all the Device Data', pollObject);\n    if (type === 'delta') {\n      // tslint:disable-next-line:no-string-literal\n      newWrapper.updateTime = pollObject['data']['updateTime'];\n      // tslint:disable-next-line:no-string-literal\n      newWrapper.devices = await this.parseDevices(pollObject['data']['devices']);\n      if (newWrapper && newWrapper.devices) {\n        // this.logService.log('zAutomationAPI::MergeAndSave: New one');\n        let update = false;\n        // tslint:disable-next-line:forin\n        for (const deviceID in newWrapper.devices) {\n          // this.logService.log('zAutomationAPI::MergeAndSave: Updating' + JSON.stringify(newWrapper.devices[deviceID]));\n          this._deviceMap.devices[deviceID] = newWrapper.devices[deviceID];\n          update = true;\n        }\n        if (update) {\n          // this.logService.log('zAutomationAPI::MergeAndSave: Notify');\n          this.setConfigWrapperToStorage(this._deviceMap);\n          this.notify();\n        }\n      }\n    } else {\n      // tslint:disable-next-line:no-string-literal\n      newWrapper.updateTime = pollObject['data']['updateTime'];\n      // tslint:disable-next-line:no-string-literal\n      newWrapper.devices = await this.parseDevices(pollObject['data']['devices']);\n      // this.logService.log(newWrapper);\n      this.deviceMap = newWrapper;\n      this.notify();\n    }\n  }\n  /**\n   * @description Here We need to Provide the Leakage Device Id and\n   *  Its Instance.\n   */\n  private async getDeviceAndInstance(\n    gateway: Gateway\n  ): Promise<{ device: number; instance: number }> {\n    return { device: gateway.leckageDeviceId, instance: 0 };\n  }\n\n  /**\n   * @description It parse from all the Device Data and return the Array of\n   * devices whose node id is matches with gateway.leckageDeviceId.\n   */\n  private async parseDevices(\n    pollObject\n  ): Promise<{ [id: string]: VirtualDevice }> {\n    const user = await this.authService.getUser();\n    const data: any = await this.gatewayService.getPairedGateway(user.access_token);\n    const deviceIDandInstance = await this.getDeviceAndInstance(data);\n    const result: { [id: string]: VirtualDevice } = {};\n    for (const obj of pollObject) {\n      // this.logService.log('Checking if ' + deviceIDandInstance.device + ' equals ' + obj.nodeId);\n      if (\n        obj &&\n        obj.nodeId &&\n        obj.nodeId.toString() === deviceIDandInstance.device.toString()\n      ) {\n        // tslint:disable-next-line:no-string-literal\n        result[obj['id']] = obj;\n      } else if (obj.id === 'DummyDevice_18') {\n        result[obj.id] = obj;\n      }\n    }\n    return result;\n  }\n  /**\n   * @description getting zautomation_object from the Local storage\n   */\n  private async getConfigWrapperFromStorage(): Promise<DeviceMap> {\n    const result: any = (this.cacheService.getLocalData(this.storageName));\n    const object: DeviceMap = (result);\n    return object;\n  }\n  /**\n   * @description setting zautomation_object from the Local storage\n   * @param obj Object need to stored in local storage.\n   */\n  private async setConfigWrapperToStorage(obj: DeviceMap) {\n    this.cacheService.setLocalData(this.storageName, (obj));\n  }\n\n  /**\n   * @description this function notify every time when some chanegs are there in sensor values.\n   */\n  private notify() {\n    sensorUpdateSub.next({ flag: true });\n  }\n\n  /**\n   * @description this is needed for filtering a specific sensor device from the whole Array\n   * @param regex  is regular erpression need to filteraton.\n   */\n  filterDeviceMap(regex: RegExp): DeviceData {\n    for (const id in this.deviceMap.devices) {\n      if (regex.test(id)) {\n        return this.deviceMap.devices[id];\n      }\n    }\n  }\n  /**\n   * @description this just increase the Failure Counter\n   */\n  private incFailureRate() {\n    if (this.failureRate.getValue() < 3) {\n      this.failureRate.next(this.failureRate.getValue() + 1);\n    }\n  }\n\n  /**\n   * @description It Just Decrease the Failure Counter.\n   */\n\n  private decFailureRate() {\n    if (this.failureRate.getValue() > 0) {\n      this.failureRate.next(this.failureRate.getValue() - 1);\n    }\n  }\n\n  /**\n   * @description it needed for getting the updated value for a perticular Sensor.\n   * @param sensorNo using this we know which sensors updated information needed.\n   */\n  public async updateSensorValue(sensorNo: number) {\n    this.logService.log('in updateSensorValue-->', sensorNo);\n    const user = await this.authService.getUser();\n    const gateway: any = await this.gatewayService.getPairedGateway(user.access_token);\n    const deviceIDandInstance = await this.getDeviceAndInstance(gateway);\n    const deviceIDandInstanceString =\n      'ZWayVDev_zway_' +\n      deviceIDandInstance.device +\n      '-' +\n      deviceIDandInstance.instance;\n\n    let sensorPath = '';\n\n    switch (sensorNo) {\n      case 0: {\n        sensorPath = deviceIDandInstanceString + '-50-0';\n        break;\n      }\n      case 1: {\n        sensorPath = deviceIDandInstanceString + '-49-23';\n        break;\n      }\n      case 2: {\n        sensorPath = deviceIDandInstanceString + '-49-56';\n        break;\n      }\n      case 3: {\n        sensorPath = deviceIDandInstanceString + '-49-57';\n        break;\n      }\n    }\n    this.logService.log('call api --->sensorPath', sensorPath);\n    await this.gatewayService.callApi(\n      gateway,\n      'ZAutomation/api/v1/devices/' + sensorPath + '/command/update'\n    );\n  }\n\n  /**\n   * @description this function is needed for the getting the Sensor values\n   * and store it in local storage.\n   * @param sensorsValue need the initaial sensor values.\n   */\n  async getSensorValue(sensorsValue) {\n    const sensors: Sensor[] = sensorsValue;\n    this.logService.log('in update method-- device metrics');\n    const user = await this.authService.getUser();\n    const gateway = await this.gatewayService.getPairedGateway(\n      user.access_token\n    );\n    if (this.deviceMap && this.deviceMap.updateTime) {\n      // this.onlineOfflineService.REGUARD_OFFLINE = false;\n      // if (!DemoMode.IS_MOCK_DATA_MODE || !DemoMode.IS_JUST_MOCK_DATA_MODE) {\n      if (this.device) {\n        this.device.sensorDevices = [];\n      } else {\n        this.device = new SafeGuardDevice();\n      }\n      if (\n        this.filterDeviceMap(\n          new RegExp(gateway.leckageDeviceId + '-[0-9]*-37$', 'g')\n        ).metrics.isFailed\n      ) {\n        // REGUARD is offline\n        // this.onlineOfflineService.REGUARD_OFFLINE = true;\n        setTimeout(() => {\n          this.getSensorValue(sensors);\n        }, 5000);\n        return;\n      }\n      // this.onlineOfflineService.REGUARD_OFFLINE = false;\n      try {\n        const settings = await this.settingService.getSettings();\n\n        // WATERMETER\n\n        const waterMeter = this.filterDeviceMap(\n          new RegExp(gateway.leckageDeviceId + '-[0-9]*-50-0$', 'g')\n        );\n\n        this.logService.log(\n          'DeviceMetricsComponent::Update: settings meter before converting: ' +\n          JSON.stringify(waterMeter.metrics.level)\n        );\n\n        sensors[0].timestamp = waterMeter.updateTime;\n\n        sensors[0].value =\n          '' +\n          this.settingService.convertAmount(\n            settings.amountUnit,\n            waterMeter.metrics.level\n          );\n\n        // Translation service\n        // this.sensors[0].subTitle = this.translationService.instant(\n        //   settings.amountUnit\n        // );\n        // this.sensors[0].title = this.translationService.instant('Amount');\n\n        // TEMPERATURE\n\n        const waterTemperature = this.filterDeviceMap(\n          new RegExp(gateway.leckageDeviceId + '-[0-9]*-49-23$', 'g')\n        );\n\n        sensors[1].timestamp = waterTemperature.updateTime;\n\n        sensors[1].value =\n          '' +\n          this.settingService.convertTemp(\n            settings.temperatureUnit,\n            waterTemperature.metrics.level\n          );\n\n        // Translation Services\n        // this.sensors[1].subTitle = this.translationService.instant(\n        //   settings.temperatureUnit\n        // );\n        // this.sensors[1].title = this.translationService.instant(\n        //   'Temperature'\n        // );\n\n        // FLOW\n\n        const waterFlow = this.filterDeviceMap(\n          new RegExp(gateway.leckageDeviceId + '-[0-9]*-49-56$', 'g')\n        );\n\n        sensors[2].timestamp = waterFlow.updateTime;\n\n        sensors[2].value =\n          '' +\n          this.settingService.convertFlow(\n            settings.flowUnit,\n            waterFlow.metrics.level\n          );\n        // Translation Services\n        // this.sensors[2].subTitle = this.translationService.instant(\n        //   settings.flowUnit\n        // );\n        // this.sensors[2].title = this.translationService.instant('Flow');\n\n        // PRESSURE\n\n        const waterPressure = this.filterDeviceMap(\n          new RegExp(gateway.leckageDeviceId + '-[0-9]*-49-57$', 'g')\n        );\n        this.logService.log(\n          'DeviceMetricsComponent::Update: settings waterPressure: ' +\n          JSON.stringify(waterPressure)\n        );\n        this.logService.log('Water Sensor Updated Time', waterPressure.updateTime);\n\n        sensors[3].timestamp = waterPressure.updateTime;\n\n        sensors[3].value =\n          '' +\n          this.settingService.convertPressure(\n            settings.pressureUnit,\n            waterPressure.metrics.level\n          );\n\n        // Dummy Device 18\n        // PRESSURE\n        // alert('11');\n        const dummyDevice = this.filterDeviceMap(\n          new RegExp('DummyDevice_18', 'g')\n        );\n        if (dummyDevice) {\n          this.logService.log('Dummy Device Updated level', dummyDevice.metrics.level);\n          sensors[4].timestamp = dummyDevice.updateTime;\n          sensors[4].value = dummyDevice.metrics.level;\n        }\n        this.logService.log('Hey I am New Sensor Value', sensors);\n        this.cacheService.setLocalData('sensors', (sensors));\n        this.logService.log('sensors-local-storage: ' + JSON.stringify(sensors));\n\n        const now = Math.floor(new Date().getTime() / 1000) - 60 * 2;\n        const nowOneMin = Math.floor(new Date().getTime() / 1000) - 20;\n\n        this.logService.log('before loop sensor--->', sensors);\n\n        for (let i = 0; i < sensors.length; i++) {\n          this.logService.log(\n            'DeviceMetricsComponent::Update: oldstamp: ' +\n            sensors[i].timestamp +\n            'newstamp: ' +\n            now\n          );\n          if (sensors[i].timestamp) {\n            if (\n              sensors[i].timestamp < now &&\n              this.appStartTime < nowOneMin\n            ) {\n              this.updateSensorValue(i);\n              this.logService.log(\n                'DeviceMetricsComponent::Update: UpdateSensorValueCalled ' +\n                (now - sensors[i].timestamp)\n              );\n            }\n          }\n        }\n      } catch (e) {\n        this.logService.log(\n          'DeviceMetricsComponent::Update: Error fetching deviceMetrics! ' + e\n        );\n      }\n      // }\n\n      if (this.freezeButtonUntil <= new Date().getTime()) {\n        const guardChecked = this.filterDeviceMap(\n          new RegExp(gateway.leckageDeviceId + '-[0-9]*-37$', 'g')\n        );\n\n        this.safeGuardChecked.flag = guardChecked.metrics.level === 'on';\n        this.cacheService.setLocalData('safeGuardChecked', (this.safeGuardChecked));\n      }\n    }\n    sensorsDataSub.next({ data: sensors });\n  }\n\n}\n"]}