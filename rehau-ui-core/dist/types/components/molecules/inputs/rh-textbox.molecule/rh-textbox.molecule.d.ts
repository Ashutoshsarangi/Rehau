import { EventEmitter } from '../../../../stencil.core';
import { CategorizedResults } from '../../../interfaces/categorized-results';
import { ControlProperties } from '../../../interfaces/forms';
export declare class MhPropMolecule {
    mask: string;
    maskActive: boolean;
    hourDisabled: Array<any>;
    dateDisable: Array<any>;
    calendarActive: boolean;
    calendarHourActive: boolean;
    label: string;
    disabled: boolean;
    placeholder: string;
    type: string;
    padding: boolean;
    setHour: string;
    ngModelVar: string;
    instructionText: string;
    maxlength: number;
    sugestions: Array<string>;
    sugestionsCatergories: Array<CategorizedResults>;
    areResultscategorized: boolean;
    minDate: string;
    maxDate: string;
    minHour: string;
    maxHour: string;
    error: boolean;
    errorText: string;
    showError: boolean;
    showCustomError: boolean;
    isFormComponent: boolean;
    formController: ControlProperties;
    emitDate: EventEmitter<any>;
    emitHour: EventEmitter<any>;
    checked: EventEmitter<any>;
    update: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    private status;
    private formError;
    maxlengthK: number;
    showAutoPopup: boolean;
    ext: string;
    fullPath: string;
    fullPathR: string;
    fullPathError: string;
    modelNgsubtr: string;
    calendar: boolean;
    items: any;
    categorizedItems: any;
    itemVisible: boolean;
    element: HTMLElement;
    constructor();
    componentWillLoad(): void;
    componentWillUpdate(): any;
    private getTextError;
    private handleChange;
    private addMaskInput;
    private handleInputChange;
    selectedChecked(event: any): void;
    checkDateError(): void;
    private getDateFromCalendar;
    private getHour;
    private getDateHour;
    private checkErrorStatusHour;
    setError(text: string): void;
    private checkErrorMinDate;
    private checkErrorMaxDate;
    private checkErrorMinHour;
    private checkErrorMaxHour;
    private checkDisabledHour;
    setFilteredItems(): void;
    itemSelected(item: any): any;
    setSuggestionsVisibilityFalse(event: any): void;
    filterCategorizedItems(categories: CategorizedResults[], searchTerm: any, lengthMax: any): any;
    filterItems(items: any, searchTerm: any, lengthMax: any): any;
    private setHourDate;
    showDate(dateObject: any): void;
    setDate(dateObject: any): void;
    selectedEvent(event: any): void;
    handleFocus(event: any): any;
    render(): void;
}
